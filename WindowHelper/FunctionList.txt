Function STRINGReplace(string to search As String, text to search for As String, text to replace the found text with As String) As String; Returns the text where the value has been replaced; Str$(Exec("WindowHelper.mbx", "STRINGReplace", "Alfabet", "A", "@"))
Function STRINGGetValueBetweenChars(Text to extract a certain value from As String, Start character, could be "[", "(" or any character As String, End character, could be "]", ")" or any character As String) As String; Returns the first text between the two characters; Str$(Exec("WindowHelper.mbx", "STRINGGetValueBetweenChars", "Find [the words] in brackets", "[", "]"))
Function STRINGConcatenateWithSeparator(First part of the concatenated string As String, Last part of the concatenated string String, Separator between the two string, only used if both are not equal to "" As String) As String; Returns the two strings concatenated with the separator unless one of the two strings is empty; Str$(Exec("WindowHelper.mbx", "STRINGConcatenateWithSeparator", "First Sentence", "Second Sentence", ", "))
Function STRINGLeftWord(String to extract specified word number from, The word number to extract from the string, use -1 for last word); Extracts a specific word from a string of words separated by spaces; Str$(Exec("WindowHelper.mbx", "STRINGLeftWord", "This is a sentence with a few words", "-1"))
Function COLExists(Table to query As String, Column to check existence of As String) As Logical; Returns true/1 if the specified column exists in the specified table; Val(Exec("WindowHelper.mbx", "COLExists", "SomeTable", "SomeColumn"))
Function COLTypeAsString (Table to query As String, Column to check type of As String) As String; Return string containing the column type (e.g. "Logical"), including the column width (e.g. "Char (49)"); Str$(Exec("WindowHelper.mbx", "COLTypeAsString", "SomeTable", "SomeColumn"))
Function CONFIGReadKey(File to read the value from As String, Section (without []) to read the value from As String, Key to read value from As String) As String; Returns the value read from the key specified, or "" if key wasn't found; Str$(Exec("WindowHelper.mbx", "CONFIGReadKey", "C:\SomeFile.ini", "SomeSections", "SomeKey"))
Sub CONFIGWriteKey(File to write configuration to As String, Section (without []) to write the value to As String, Key to write the value to As String, value to write to the key above As String); Writes the specified value to the section and key in the file specifed; Print Exec("WindowHelper.mbx", "CONFIGWriteKey", "C:\SomeFile.ini", "SomeSections", "SomeKey", "TheValue")
Method FILECreateFolder(Folder path to create, all folders in the path will be created As String); Creates all the folders in the paths that don't exist; Exec("WindowHelper.mbx", "FILECreateFolder", "C:\Test WinHelper\Sum Folder")
Method FILEDeleteFolder(Folder path to create, all folders in the path will be created As String); Folder path to delete, only deepest folder in the path will be deleted, including all file and folder contents; Exec("WindowHelper.mbx", "FILEDeleteFolder", "C:\Test WinHelper\Sum Folder")
Function LAYERExists(ID of Map Window As Integer, Name of Layer to Check As String) As Logical; Returns 1 if the specified layer exists in the map given; Val(Exec("WindowHelper.mbx", "LAYERExists", FrontWindow(), "World"))
Function LAYERGetLayerNumber(ID of Map Window As Integer, Name of Layer to Check As String) As Integer; Returns the layer number of the specified layer in the map given; Val(Exec("WindowHelper.mbx", "LAYERGetLayerNumber", FrontWindow(), "World"))
Function STLAlterPen(Object whoes style to change As Object, New Pen style to assign As Pen) As Object; Return the input object (linear and surfaces only)with a different style; Update SomeTable Set OBJ = Exec("WindowHelper.mbx", "STLAlterPen", OBJ, MakePen(2,1,255))
Function STLAlterBrush(Object whoes style to change As Object, New Brush style to assign As Brush) As Object; Return the input object (surfaces only) with a different style; Update SomeTable Set OBJ = Exec("WindowHelper.mbx", "STLAlterBrush", OBJ, MakeBrush(19,255,-1))
Function STLAlterSymbol(Object whoes style to change As Object, New Symbol style to assign As Symbol) As Object; Return the input object (points only) with a different style; Update SomeTable Set OBJ = Exec("WindowHelper.mbx", "STLAlterSymbol", OBJ, MakeFontSymbol(35,16750640,10,"MapInfo Symbols",0,0))
Function STLSymbol2Text(Convert the Symbol to a standard text As Symbol) As String; Returns a string illustrating the Symbol; Str$(Exec("WindowHelper.mbx", "STLSymbol2Text", CurrentSymbol()))
Function STLBrush2Text(Convert the Brush to a standard text As Brush) As String; Returns a Text illustrating the Brush; Str$(Exec("WindowHelper.mbx", "STLBrush2Text", CurrentBrush()))
Function STLPen2Text(Convert the Pen to a standard text As Pen) As String; Returns a Text illustrating the Pen; Str$(Exec("WindowHelper.mbx", "STLPen2Text", CurrentPen()))
Function STLText2Symbol(Convert a standard text to a Symbol As String) As Symbol; Return the Symbol from the text; Set Style Symbol Exec("WindowHelper.mbx", "STLText2Symbol", "2,35,16750640,10,MapInfo Symbols,0,0")
Function STLText2Brush(Convert a standard text to a Brush As String) As Brush; Return the Brush from the text; Set Style Brush Exec("WindowHelper.mbx", "STLText2Brush", "2,5278719,16777215")
Function STLText2Pen(Convert a standard text to a Pen As String) As Pen; Return the Pen from the text; Set Style Pen Exec("WindowHelper.mbx", "STLText2Pen", "2,2,5278719")
Function TABIsOpen(Table to check for As String) As Logical; Returns true/1 if the table is open; Val(Exec("WindowHelper.mbx", "TABIsOpen", "SomeTable"))
Sub TABClose(Table to Close As String); Closes the table if it is open; Print Exec("WindowHelper.mbx", "TABClose", "SomeTable")
Sub TABDrop(Table to Drop/Delete As String); Drops/Deletes the tables if it is open; Print Exec("WindowHelper.mbx", "TABDrop", "SomeTable")
Sub TABCommit(Table to Save As String; Saves potentially changes to the table if it is open; Print Exec("WindowHelper.mbx", "TABCommit", "SomeTable")
Function TABGetNameFromTabFile(Tab File to look for As String) As String; Return the name of the table if it is open, and "" if a table with this tab file isn't open; Str$(Exec("WindowHelper.mbx", "TABGetNameFromTabFile", "D:\Data\World.tab"))
Function MAPHGetCartographicScale(Map Window ID to inspect As Integer) As Integer; Returns the cartographic scale of the map specified; Val(Exec("WindowHelper.mbx", "MAPHGetCartographicScale", FrontWindow()))
Function MAPHGetCoordinate(Map Window ID to inspect As Integer, "MINX") As Float; Returns MINX coordinate from map window specified; Val(Exec("WindowHelper.mbx", "MAPHGetCoordinate", FrontWindow(), "MINX"))
Function MAPHGetCoordinate(Map Window ID to inspect As Integer, "MINY") As Float; Returns MINY coordinate from map window specified; Val(Exec("WindowHelper.mbx", "MAPHGetCoordinate", FrontWindow(), "MINY"))
Function MAPHGetCoordinate(Map Window ID to inspect As Integer, "MAXX") As Float; Returns MAXX coordinate from map window specified; Val(Exec("WindowHelper.mbx", "MAPHGetCoordinate", FrontWindow(), "MAXX"))
Function MAPHGetCoordinate(Map Window ID to inspect As Integer, "MAXY") As Float; Returns MAXY coordinate from map window specified; Val(Exec("WindowHelper.mbx", "MAPHGetCoordinate", FrontWindow(), "MAXY"))
Function MAPHGetCoordinate(Map Window ID to inspect As Integer, "CENTX") As Float; Returns CENTERX coordinate from map window specified; Val(Exec("WindowHelper.mbx", "MAPHGetCoordinate", FrontWindow(), "CENTX"))
Function MAPHGetCoordinate(Map Window ID to inspect As Integer, "CENTY") As Float; Returns CENTERY coordinate from map window specified; Val(Exec("WindowHelper.mbx", "MAPHGetCoordinate", FrontWindow(), "CENTX"))