Sub WHSetCoordsysUsingTable(name of table to set the coordsys of the tool to match); Sets the internal coordsys of the tool to match the coordsys of the table; print WHSetCoordsysUsingTable("Selection")
Sub WHSetCoordsysUsingMap(Id of map to set the coordsys of the tool to match); Sets the internal coordsys of the tool to match the coordsys of the map; print WHSetCoordsysUsingMap(FrontWindow())
Function WHReplace$(string to search As String, text to search for As String, text to replace the found text with As String) As String; Returns the text where the value has been replaced; WHReplace$("Alfabet", "A", "@")
Function WHExtractValueBetweenChars$(Text to extract a certain value from As String, Start character, could be "[", "(" or any character As String, End character, could be "]", ")" or any character As String) As String; Returns the first text between the two characters; WHExtractValueBetweenChars$("Find [the words] in brackets", "[", "]")
Function WHCombineWithSeparator$(First part of the concatenated string As String, Last part of the concatenated string String, Separator between the two string, only used if both are not equal to "" As String) As String; Returns the two strings concatenated with the separator unless one of the two strings is empty; WHCombineWithSeparator$("First Sentence", "Second Sentence", ", ")
Function WHLeftWord$(String to extract specified word number from, The word number to extract from the string, use -1 for last word); Extracts a specific word from a string of words separated by spaces; WHLeftWord$("This is a sentence with a few words", 1)
Function WHColumnExists(Table to query As String, Column to check existence of As String) As Logical; Returns true/1 if the specified column exists in the specified table; WHColumnExists("Selection", "SomeColumn")
Function WHColumnTypeAsString(Table to query As String, Column to check type of As String) As String; Return string containing the column type (e.g. "Logical"), including the column width (e.g. "Char (49)"); WHColumnTypeAsString("Selection", "SomeColumn")
Function WHConfigReadKey(File to read the value from As String, Section (without []) to read the value from As String, Key to read value from As String) As String; Returns the value read from the key specified, or "" if key wasn't found; WHConfigReadKey("C:\SomeFile.ini", "SomeSections", "SomeKey")
Sub WHConfigWriteKey(File to write configuration to As String, Section (without []) to write the value to As String, Key to write the value to As String, value to write to the key above As String); Writes the specified value to the section and key in the file specifed; Print WHConfigWriteKey("C:\SomeFile.ini", "SomeSections", "SomeKey", "TheValue")
Function WHAlterPen(Object whoes style to change As Object, New Pen style to assign As Pen) As Object; Return the input object (linear and surfaces only)with a different style; Update Selection Set OBJ = WHAlterPen(OBJ, MakePen(2,1,255))
Function WHAlterBrush(Object whoes style to change As Object, New Brush style to assign As Brush) As Object; Return the input object (surfaces only) with a different style; Update Selection Set OBJ = WHAlterBrush(OBJ, MakeBrush(19,255,-1))
Function WHAlterSymbol(Object whoes style to change As Object, New Symbol style to assign As Symbol) As Object; Return the input object (points only) with a different style; Update Selection Set OBJ = WHAlterSymbol(OBJ, MakeFontSymbol(35,16750640,10,"MapInfo Symbols",0,0))
Function WHSymbol2Text(Convert the Symbol to a standard text As Symbol) As String; Returns a string illustrating the Symbol; WHSymbol2Text(CurrentSymbol())
Function WHBrush2Text(Convert the Brush to a standard text As Brush) As String; Returns a Text illustrating the Brush; WHBrush2Text(CurrentBrush())
Function WHPen2Text(Convert the Pen to a standard text As Pen) As String; Returns a Text illustrating the Pen; WHPen2Text(CurrentPen())
Function WHText2Symbol(Convert a standard text to a Symbol As String) As Symbol; Return the Symbol from the text; Set Style Symbol WHText2Symbol("2,35,16750640,10,MapInfo Symbols,0,0")
Function WHText2Brush(Convert a standard text to a Brush As String) As Brush; Return the Brush from the text; Set Style Brush WHText2Brush("2,5278719,16777215")
Function WHText2Pen(Convert a standard text to a Pen As String) As Pen; Return the Pen from the text; Set Style Pen WHText2Pen("2,2,5278719")
Function WHTableIsOpen(Table to check for As String) As Logical; Returns true/1 if the table is open; WHTableIsOpen("Selection")
Function WHMapGetExtent(Map Window nMID get the extent from As Integer) As Object; Returns the Extent of the specified map window as a spatial object; Select * From Selection Where WHMapGetExtent(FrontWindow()) Contains OBJ
Function WHMAPGetCoordinate(Map Window ID to inspect As Integer, "MINX") As Float; Returns MINX coordinate from map window specified; WHMAPGetCoordinate(FrontWindow(), "MINX")
Function WHMAPGetCoordinate(Map Window ID to inspect As Integer, "MINY") As Float; Returns MINY coordinate from map window specified; WHMAPGetCoordinate(FrontWindow(), "MINY")
Function WHMAPGetCoordinate(Map Window ID to inspect As Integer, "MAXX") As Float; Returns MAXX coordinate from map window specified; WHMAPGetCoordinate(FrontWindow(), "MAXX")
Function WHMAPGetCoordinate(Map Window ID to inspect As Integer, "MAXY") As Float; Returns MAXY coordinate from map window specified; WHMAPGetCoordinate(FrontWindow(), "MAXY")
Function WHMAPGetCoordinate(Map Window ID to inspect As Integer, "CENTX") As Float; Returns CENTERX coordinate from map window specified; WHMAPGetCoordinate(FrontWindow(), "CENTX")
Function WHMAPGetCoordinate(Map Window ID to inspect As Integer, "CENTY") As Float; Returns CENTERY coordinate from map window specified; WHMAPGetCoordinate(FrontWindow(), "CENTX")
Function WHSetCentroidXY(Polygon Object to set Centroid on, New Centroid X value, New Centroid Y value) As Object; Returns the polygon object with a changed centroid; Update Selection Set OBJ = WHSetCentroidXY(OBJ, X, Y)
Function WHSetCentroid(Polygon Object to set Centroid on, New Centroid Object) As Object; Returns the polygon object with a changed centroid; Update Selection Set OBJ = WHSetCentroidXY(OBJ, CreatePoint(X, Y))
Function WHGetColumnValue(Table to read the value from, Column to read the value from, RowID of record to read the value from, Show any errors as the returned string) As String; Returns the value read from the table; $mb{WHGetColumnValue("Selection", "SomeColumn", 1, 1)}
Function TABHGetSelectionValue(Column to read the value from, RowID of record to read the value from, Show any errors as the returned string) As String; Returns the value read from the current selection; $mb{TABHGetSelectionValue("SomeColumn", 1, 1)}
