'*******************************************************************************
'** 	Created By Peter Horsbøll Møller, Pitney Bowes Software
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Icons.def"
Include "Menu.def"
'**default constants...
Include "Library\Defaults.def"

'-------------------------------------
Include "Library\ARRAYLib.def"
Include "Library\COLUMNLib.def"
Include "Library\CONFIGFILELib.def"
Include "Library\DEBUGLib.def"
Include "Library\ERRORLib.def"
Include "Library\LAYERLib.def"
Include "Library\ReadRecordsLib.def"
Include "Library\STRINGLib.def"
Include "Library\STYLELib.def"
Include "Library\TABLELib.def"

Include "DLGQuickThemeIndividual.def"
Include "WindowHelper.Assembly.def"

Define	CTRL_LST_LAYERS			100
Define	CTRL_LST_COLUMNS			200
Define	CTRL_LST_COLORRANGES		300
Define	CTRL_TXT_BINCOUNT			400
Define	CTRL_TXT_NUM_BINS_LIMITED_TO	500
Define	CTRL_CMD_STYLE_LINE			601
Define	CTRL_CMD_STYLE_SYMBOL		611
Define	CTRL_CMD_STYLE_BRUSH		621
Define	CTRL_CMD_STYLE_PEN			622
Define	CTRL_LST_STYLE_BRUSH_FG_BG	623
Define	CTRL_CMD_OK				1000

Declare Sub DLGQTI_OnLoad
Declare Sub DLGQTI_OKClicked
Declare Sub DLGQTI_LayerListClicked
Declare Sub DLGQTI_ColumnListClicked
Declare Sub DLGQTI_ColorRangeListClicked
Declare Sub DLGQTI_LoadLayerList
Declare Sub DLGQTI_LoadColumnList

Declare Sub DLGQTILoadColorRanges
Declare Function DLGQTIGetColorValue(ByVal sColor As String) As Integer

Type T_COLOR_RANGES
	sName		As String
	arrColors()	As Integer
End Type

Dim	msLayerName, msColumnName, msDefaultColumnName As String,
	mbUserDoubleClickedOnColumn, mbInitiatingDialog, mbStylesInitialized As Logical,
	marrLayerDescription(), marrLayerNames(), marrColumnNames(), marrColorRangeNames(), marrBinValues() As String,
	marrColorRanges() As T_COLOR_RANGES,
	marrColors(), mnChangeBrushColorType As Integer,
	mnMID, marrLayerIDs(), mnLayerID, mnDefaultLayerID, mnLayerTypesToUse, mnColumnTypesToUse, mnColorRange As Integer,
	mpenDefaultBorder, mpenDefaultLine As Pen,
	mbrsDefaultFill As Brush,
	msymDefaultSymbol As Symbol


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQuickThemeIndividual(	  ByVal nMID As Integer				'**ID of Map Window to load layers from
							, ByVal nDefaultLayerID As String		'**Preselected Layer if found in nthe List of Layer IDs
							, ByVal sDefaultColumnName As String	'**Preselected Column if found in nthe List of Columns
							) As Logical

Dim	penCurrentBorderPen, penCurrentLinePen, penCurrentPen As Pen

OnError GoTo ErrorOccured

DLGQuickThemeIndividual = FALSE

	mnMID					= nMID
	mnLayerTypesToUse			= LAYER_USE_NORMAL + LAYER_USE_TEMP + LAYER_USE_READONLY	' + LAYER_USE_ONLY_SELECTABLE	'+ LAYER_USE_ONLY_VISIBLE
	mnLayerID					= 0
	msLayerName				= ""
	mnDefaultLayerID			= nDefaultLayerID
	mnColumnTypesToUse			= CRITERIA_USE_CHAR + CRITERIA_USE_INTEGER + CRITERIA_USE_SMALLINT + CRITERIA_USE_LARGEINT ' + CRITERIA_USE_LOGICAL ' + CRITERIA_USE_DATE + CRITERIA_USE_TIME
	msColumnName				= ""
	msDefaultColumnName			= sDefaultColumnName
	mbUserDoubleClickedOnColumn	= FALSE

	penCurrentBorderPen		= CurrentBorderPen()
	penCurrentLinePen		= CurrentLinePen()
	penCurrentPen			= CurrentPen()
'	Set Style BorderPen MakePen(1,1,0)
'	Set Style LinePen 	MakePen(1,1,0)
	Set Style Pen 		MakePen(1,1,0)

	If Not mbStylesInitialized Then
		mpenDefaultLine	= penCurrentLinePen
		If StyleAttr(mpenDefaultLine, PEN_PATTERN) = 1 Then
			mpenDefaultLine	= STLChangePenPattern(mpenDefaultLine, 2)
		End If

		msymDefaultSymbol	= CurrentSymbol()
		If StyleAttr(msymDefaultSymbol, SYMBOL_CODE) = 31 Then
			msymDefaultSymbol	= STLChangeSymbolSymbolCode(msymDefaultSymbol, 32)
		End If

		mpenDefaultBorder	= penCurrentBorderPen
		If StyleAttr(mpenDefaultBorder, PEN_PATTERN) = 1 Then
			mpenDefaultBorder	= STLChangePenPattern(mpenDefaultBorder, 2)
		End If
		mbrsDefaultFill	= CurrentBrush()
		If StyleAttr(mbrsDefaultFill, BRUSH_PATTERN) = 1 Then
			mbrsDefaultFill	= STLChangeBrushPattern(mbrsDefaultFill, 2)
		End If

		mbStylesInitialized	= TRUE
	End If

	Call DLGQTILoadColorRanges

	Dialog
		Title GetResItemStr("DLG_TITLE_QUICK_THEME_INDIVIDUAL")
		Calling DLGQTI_OnLoad

		Control StaticText		Position 5,5
			Title GetResItemStr("DLG_THEME_SELECT_LAYER")
		Control PopupMenu		Position 5,15		ID CTRL_LST_LAYERS
			Width 200
			Calling DLGQTI_LayerListClicked

		Control StaticText		Position 5,35
			Title GetResItemStr("DLG_THEME_SELECT_COLUMN")
		Control Listbox		Position 5,45		ID CTRL_LST_COLUMNS
			Width 200	Height 80
			Calling DLGQTI_ColumnListClicked

		Control StaticText		Position 5,130
			Title GetResItemStr("DLG_THEME_SELECT_COLOR_RANGE")
		Control PopupMenu		Position 5,140		ID CTRL_LST_COLORRANGES
			Width 140
			Title From Variable marrColorRangeNames
			Value Maximum(1, mnColorRange)
			Calling DLGQTI_ColorRangeListClicked
			Into mnColorRange

		Control StaticText		Position 150,130
			Title GetResItemStr("DLG_THEME_NUM_BINS")
		Control EditText		Position 150,140	ID CTRL_TXT_BINCOUNT
			Width 55
			Value ""
			Disable

		Control StaticText		Position 80,160	ID CTRL_TXT_NUM_BINS_LIMITED_TO
			Title GetResItemStrReplace("DLG_NUM_BINS_LIMITED_TO", "256")

		Control PenPicker		Position 5,175		ID CTRL_CMD_STYLE_LINE
			Width 20	Height 20
			Value mpenDefaultLine
			Into mpenDefaultLine
		Control SymbolPicker	Position 5,175		ID CTRL_CMD_STYLE_SYMBOL
			Width 20	Height 20
			Value msymDefaultSymbol
			Into msymDefaultSymbol
		Control PenPicker		Position 5,175		ID CTRL_CMD_STYLE_PEN
			Width 20	Height 20
			Value mpenDefaultBorder
			Into mpenDefaultBorder
		Control BrushPicker		Position 30,175	ID CTRL_CMD_STYLE_BRUSH
			Width 20	Height 20
			Value mbrsDefaultFill
			Into mbrsDefaultFill

		Control RadioGroup		Position 60, 175	ID CTRL_LST_STYLE_BRUSH_FG_BG
			Title "Foreground;Background"
			Value DLGQTIGetChangeBrushColorType()
			Into mnChangeBrushColorType

		Control OKButton		Position 120,175	ID CTRL_CMD_OK
			Width 40
			Calling DLGQTI_OKClicked
		Control CancelButton	Position 165,175
			Width 40

	If not CommandInfo(CMD_INFO_DLG_OK) Then
'		Set Style BorderPen penCurrentBorderPen
'		Set Style LinePen 	penCurrentLinePen
		Set Style Pen 		penCurrentPen
		If NOT mbUserDoubleClickedOnColumn Then
			mnLayerID		= 0
			msLayerName	= ""
			msColumnName	= ""
			Exit Function
		End If
	Else
'		Set Style BorderPen penCurrentBorderPen
'		Set Style LinePen 	penCurrentLinePen
		Set Style Pen 		penCurrentPen
	End If

	DLGQuickThemeIndividual = TRUE

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQuickThemeIndividual")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub DLGQTI_OnLoad

Dim	nLayer As Integer

OnError GoTo ErrorOccured

	mbInitiatingDialog	= TRUE

	Alter Control CTRL_CMD_OK				Disable
	Alter Control CTRL_TXT_NUM_BINS_LIMITED_TO	Hide

	Call DLGQTI_LoadLayerList

	If mnDefaultLayerID > 0 Then
		nLayer = ARRAYFindValueInteger(marrLayerIDs, mnDefaultLayerID)
		If nLayer > 0 Then
			Alter Control CTRL_LST_LAYERS	Value nLayer
			Call DLGQTI_LayerListClicked
		End If
	End If
	If nLayer = 0 Then
		If Ubound(marrLayerNames) > 0 Then
			Alter Control CTRL_LST_LAYERS	Value 1
			Call DLGQTI_LayerListClicked
		End If
	End If

	Call DLGQTI_ColorRangeListClicked

	mbInitiatingDialog = FALSE

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTI_OnLoad")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub DLGQTI_OKClicked

Dim	nLayer, nCol As Integer

OnError GoTo ErrorOccured

	nLayer	= ReadControlValue(CTRL_LST_LAYERS)
	If nLayer = 0 Then
		Dialog Preserve
		Exit Sub
	End If

	msLayerName	= marrLayerNames(nLayer)
	mnLayerID		= marrLayerIDs(nLayer)

	nCol	= ReadControlValue(CTRL_LST_COLUMNS)
	If nCol = 0 Then
		Dialog Preserve
		Exit Sub
	End If

	msColumnName	= marrColumnNames(nCol)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTI_OKClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub DLGQTI_LoadLayerList

Dim nLayer As Integer

OnError GoTo ErrorOccured

	Redim marrLayerNames(0)
	Redim marrLayerDescription(0)
	Redim marrLayerIDs(0)
	If LAYERGetListOfNames(mnMID, mnLayerTypesToUse, marrLayerIDs(), marrLayerNames()) = 0 Then
		ReDim marrLayerNames(0)
	End If

	Redim marrLayerDescription(Ubound(marrLayerNames))
	For nLayer = 1 To Ubound(marrLayerNames)
		If LayerInfo(mnMID, marrLayerIDs(nLayer), LAYER_INFO_FRIENDLYNAME) <> "" Then
			marrLayerDescription(nLayer) = LayerInfo(mnMID, marrLayerIDs(nLayer), LAYER_INFO_FRIENDLYNAME) & " (" & marrLayerNames(nLayer) & ")"
		Else
			marrLayerDescription(nLayer) = marrLayerNames(nLayer)
		End If
	Next

	Alter Control CTRL_LST_LAYERS	Title From Variable marrLayerDescription

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTI_LoadLayerList")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub DLGQTI_LoadColumnList

OnError GoTo ErrorOccured

	Redim marrColumnNames(0)
	If COLGetListOfNames(msLayerName, mnColumnTypesToUse, marrColumnNames()) Then

	End If

	Alter Control CTRL_LST_COLUMNS Title From Variable marrColumnNames
'	Call DLGQTI_ColumnListClicked

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTI_LoadColumnList")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub DLGQTI_LayerListClicked

Dim	nColumn As Integer

OnError GoTo ErrorOccured

	mbInitiatingDialog = TRUE

	msLayerName	= marrLayerNames(ReadControlValue(CTRL_LST_LAYERS))
	mnLayerID		= marrLayerIDs(ReadControlValue(CTRL_LST_LAYERS))
	Call DLGQTI_LoadColumnList

	If msDefaultColumnName > "" Then
		nColumn = ARRAYFindValueString(marrColumnNames, msDefaultColumnName)
		If nColumn > 0 Then
			Alter Control CTRL_LST_COLUMNS	Value nColumn
			Call DLGQTI_ColumnListClicked
		End If
	End If

	Alter Control CTRL_CMD_OK Enable
	Do Case TableInfo(msLayerName, TAB_INFO_DOMINANT_OBJECT_TYPE)
		Case TAB_POINT_OBJECTS
			Alter Control CTRL_CMD_STYLE_LINE			Hide
			Alter Control CTRL_CMD_STYLE_SYMBOL		Show
			Alter Control CTRL_CMD_STYLE_PEN			Hide
			Alter Control CTRL_CMD_STYLE_BRUSH			Hide
			Alter Control CTRL_LST_STYLE_BRUSH_FG_BG	Hide
		Case TAB_LINE_OBJECTS
			Alter Control CTRL_CMD_STYLE_LINE			Show
			Alter Control CTRL_CMD_STYLE_SYMBOL		Hide
			Alter Control CTRL_CMD_STYLE_PEN			Hide
			Alter Control CTRL_CMD_STYLE_BRUSH			Hide
			Alter Control CTRL_LST_STYLE_BRUSH_FG_BG	Hide
		Case TAB_AREA_OBJECTS
			Alter Control CTRL_CMD_STYLE_LINE			Hide
			Alter Control CTRL_CMD_STYLE_SYMBOL		Hide
			Alter Control CTRL_CMD_STYLE_PEN			Show
			Alter Control CTRL_CMD_STYLE_BRUSH			Show
			Alter Control CTRL_LST_STYLE_BRUSH_FG_BG	Show
		Case Else
			Print "Uh uh, a layer with predominant object types different to point, lines and areas!"
		Alter Control CTRL_CMD_OK Disable
	End Case

	mbInitiatingDialog = FALSE

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTI_LayerListClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub DLGQTI_ColumnListClicked

Dim	nCol, nCount As Integer

OnError GoTo ErrorOccured

	nCol	= ReadControlValue(CTRL_LST_COLUMNS)
	If nCol = 0 Then
		Alter Control CTRL_CMD_OK	Disable
	Else
		Alter Control CTRL_CMD_OK	Enable
	End If

	msColumnName = marrColumnNames(ReadControlValue(CTRL_LST_COLUMNS))

	ReDim marrBinValues(0)
	nCount = RRGetValuesAsString(msLayerName, msColumnName, msColumnName, msColumnName, marrBinValues)
	Alter Control CTRL_TXT_BINCOUNT Value FormatNumber$(nCount)
	If nCount > 256 Then	'Or is it 1896 ???
		Alter Control CTRL_CMD_OK Disable
		Alter Control CTRL_TXT_NUM_BINS_LIMITED_TO Show
	Else
		Alter Control CTRL_CMD_OK Enable
		Alter Control CTRL_TXT_NUM_BINS_LIMITED_TO Hide
	End If

	If NOT mbInitiatingDialog Then
		If CommandInfo(CMD_INFO_DLG_DBL) Then
			mbUserDoubleClickedOnColumn = TRUE
'			Call DLGQTI_OKClicked
			Dialog Remove
		End If
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTI_ColumnListClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub DLGQTI_ColorRangeListClicked

Dim	nItem As Integer

OnError GoTo ErrorOccured

	nItem	= ReadControlValue(CTRL_LST_COLORRANGES)
	If nItem = 0 Then
		Alter Control CTRL_CMD_OK	Disable
	Else
		Alter Control CTRL_CMD_OK	Enable
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTI_ColorRangeListClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DLGQTILoadColorRanges

Dim	i, nTheme, nColor, nNotFoundCount As Integer,
	sName, sColor, sFile As String

OnError GoTo ErrorOccured

	sFile = ApplicationDirectory$() & "QuickThematic.ini"
	If FileExists(sFile) Then
		nNotFoundCount = 0
		nTheme		= 0
		Do
			nTheme = nTheme + 1
			sName = CONFIGReadKey(sFile, "INDIVIDUAL THEMATICS", "INDIVIDUALTHEME" & nTheme)
'			Call DEBUGPrint(nTheme & ": " & sName & ".")
			If sName <> "" Then
				i = i + 1
				Redim marrColorRanges(i)
				marrColorRanges(i).sName		= sName

				For nColor = 1 To 256
					sColor = CONFIGReadKey(sFile, "INDIVIDUALTHEME" & nTheme, "COLOR" & nColor)
'					Call DEBUGPrint(nColor & ". Color : " & sColor)
					If sColor = "" Then
						Exit For
					End If
					Redim marrColorRanges(i).arrColors(nColor)
					marrColorRanges(i).arrColors(nColor)	= DLGQTIGetColorValue(sColor)
				Next

'				Call DEBUGPrint(sName & ": " & Ubound(marrColorRanges(i).arrColors) & " colors")
				If Ubound(marrColorRanges(i).arrColors) = 0 Then
					Redim marrColorRanges(i).arrColors(2)
					marrColorRanges(i).arrColors(1)	= RED
					marrColorRanges(i).arrColors(2)	= BLUE
				End If

				nNotFoundCount = 0
			Else
				nNotFoundCount = nNotFoundCount + 1
			End If

			sName = ""

		Loop While nNotFoundCount < 4
	End If

	If Ubound(marrColorRanges) = 0 Then
		i = i + 1
		Redim marrColorRanges(i)
		marrColorRanges(i).sName			= "Red"
		marrColorRanges(i).arrColors(1)	= RGB(255,160,160)
		marrColorRanges(i).arrColors(2)	= RGB(224,0,0)

		i = i + 1
		Redim marrColorRanges(i)
		marrColorRanges(i).sName			= "Green"
		marrColorRanges(i).arrColors(1)	= RGB(176,255,176)
		marrColorRanges(i).arrColors(2)	= RGB(0,80,0)

		i = i + 1
		Redim marrColorRanges(i)
		marrColorRanges(i).sName			= "Blue"
		marrColorRanges(i).arrColors(1)	= RGB(192,213,255)
		marrColorRanges(i).arrColors(2)	= RGB(0,27,80)

		i = i + 1
		Redim marrColorRanges(i)
		marrColorRanges(i).sName			= "Orange"
		marrColorRanges(i).arrColors(1)	= RGB(255,192,128)
		marrColorRanges(i).arrColors(2)	= RGB(224,112,0)

		i = i + 1
		Redim marrColorRanges(i)
		marrColorRanges(i).sName			= "Purple"
		marrColorRanges(i).arrColors(1)	= 16752895
		marrColorRanges(i).arrColors(2)	= 12583104

		i = i + 1
		Redim marrColorRanges(i)
		marrColorRanges(i).sName			= "Rainbow - 8 colors"
		Redim marrColorRanges(i).arrColors(8)
		marrColorRanges(i).arrColors(1)	= RGB(255,0,0)		'E1
		marrColorRanges(i).arrColors(2)	= RGB(255,128,0)	'D9
		marrColorRanges(i).arrColors(3)	= RGB(255,168,80)	'D7
		marrColorRanges(i).arrColors(4)	= RGB(255,255,64)	'F6
		marrColorRanges(i).arrColors(5)	= RGB(179,255,64)	'G7
		marrColorRanges(i).arrColors(6)	= RGB(0,224,0)		'H10
		marrColorRanges(i).arrColors(7)	= RGB(0,171,255)	'K10
		marrColorRanges(i).arrColors(8)	= RGB(0,0,160)		'M14

		i = i + 1
		Redim marrColorRanges(i)
		marrColorRanges(i).sName			= "Rainbow - 6 colors"
		Redim marrColorRanges(i).arrColors(6)
		marrColorRanges(i).arrColors(1)	= RGB(255,0,0)		'E1
		marrColorRanges(i).arrColors(2)	= RGB(255,128,0)	'D9
		marrColorRanges(i).arrColors(3)	= RGB(255,255,64)	'F6
		marrColorRanges(i).arrColors(4)	= RGB(0,224,0)		'H10
		marrColorRanges(i).arrColors(5)	= RGB(0,171,255)	'K10
		marrColorRanges(i).arrColors(6)	= RGB(0,0,160)		'M14

		i = i + 1
		Redim marrColorRanges(i)
		marrColorRanges(i).sName			= "Rainbow (Line 6) - 8 colors"
		Redim marrColorRanges(i).arrColors(8)
		marrColorRanges(i).arrColors(1)	= RGB(255,128,128)	'B6
		marrColorRanges(i).arrColors(2)	= RGB(255,176,96)	'D6
		marrColorRanges(i).arrColors(3)	= RGB(255,255,64)	'F6
		marrColorRanges(i).arrColors(4)	= RGB(112,255,112)	'H6
		marrColorRanges(i).arrColors(5)	= RGB(112,255,255)	'J6
		marrColorRanges(i).arrColors(6)	= RGB(128,171,255)	'L6
		marrColorRanges(i).arrColors(7)	= RGB(192,128,255)	'N6
		marrColorRanges(i).arrColors(8)	= RGB(255,128,192)	'P6

		i = i + 1
		Redim marrColorRanges(i)
		marrColorRanges(i).sName			= "Rainbow (Line 9) - 8 colors"
		Redim marrColorRanges(i).arrColors(8)
		marrColorRanges(i).arrColors(1)	= RGB(255,64,64)	'B9
		marrColorRanges(i).arrColors(2)	= RGB(255,128,0)	'D9
		marrColorRanges(i).arrColors(3)	= RGB(224,224,0)	'F9
		marrColorRanges(i).arrColors(4)	= RGB(0,255,0)		'H9
		marrColorRanges(i).arrColors(5)	= RGB(0,240,240)	'J9
		marrColorRanges(i).arrColors(6)	= RGB(64,128,255)	'L9
		marrColorRanges(i).arrColors(7)	= RGB(160,64,255)	'N9
		marrColorRanges(i).arrColors(8)	= RGB(255,64,160)	'P9
	End If

	Redim marrColorRangeNames(Ubound(marrColorRanges))
	For i = 1 To Ubound(marrColorRanges)
		marrColorRangeNames(i) = marrColorRanges(i).sName
	Next

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTILoadColorRanges")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter HorsbÃ¸ll MÃ¸ller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetColorValue(ByVal sColor As String) As Integer

Dim	nColor As Integer,
	arrColors() As String

OnError GoTo ErrorOccured

DLGQTIGetColorValue = RED

	Do Case STRINGSplitAndTrim(sColor, ",", arrColors)
		Case 1
			nColor = Val(sColor)
		Case 3
			nColor = RGB(Val(arrColors(1)), Val(arrColors(2)), Val(arrColors(3)))
		Case Else
			nColor = RED
	End Case

	DLGQTIGetColorValue = nColor

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetColorValue")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetLayerID() As Integer

OnError GoTo ErrorOccured

	DLGQTIGetLayerID = mnLayerID
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetLayerID")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetLayerName() As String

OnError GoTo ErrorOccured

	DLGQTIGetLayerName = msLayerName
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetLayerName")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetColumnName() As String

OnError GoTo ErrorOccured

	DLGQTIGetColumnName = msColumnName
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetColumnName")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetBinCount() As Integer

OnError GoTo ErrorOccured

	DLGQTIGetBinCount = Ubound(marrBinValues)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetBinCount")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetBinValue( ByVal nBin As Integer) As String

OnError GoTo ErrorOccured

	DLGQTIGetBinValue = marrBinValues(nBin)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetBinValue")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetBinColor( ByVal nBin As Integer) As Integer

OnError GoTo ErrorOccured

	If nBin > Ubound(marrColors) Then
		nBin = nBin Mod Ubound(marrColors)

		If nBin = 0 Then
			nBin = Ubound(marrColors)
		End If
	End If

	DLGQTIGetBinColor = marrColors(nBin)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetBinColor")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIPrepareColors() As Integer

Dim	arrBrushes() As Brush,
	nColor, nColors As Integer

OnError GoTo ErrorOccured

	nColors	= Ubound(marrColorRanges(mnColorRange).arrColors)
	If nColors = 2 Then
		nColors	= Minimum(24, DLGQTIGetBinCount())
		Create Styles
			From Brush MakeBrush(2, marrColorRanges(mnColorRange).arrColors(1), 16777215) 'style for LOW range,
			To Brush MakeBrush (2, marrColorRanges(mnColorRange).arrColors(2), 16777215) 'style for HIGH range
			Vary Color By "RGB"
			Number nColors
			Into Variable arrBrushes

		Redim marrColors(nColors)
		Print "Looping through " & nColors & " brushes"
		For nColor = 1 To nColors
			marrColors(nColor) = StyleAttr(arrBrushes(nColor), BRUSH_FORECOLOR)
		Next
	Else

		Redim marrColors(nColors)
		Print "Looping through " & nColors & " colors"
		For nColor = 1 To nColors
			marrColors(nColor) =  marrColorRanges(mnColorRange).arrColors(nColor)
		Next
	End If

	DLGQTIPrepareColors = Ubound(marrColors)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIPrepareColors")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetBinBrush(	ByVal nBin As Integer) As Brush

OnError GoTo ErrorOccured

	If DLGQTIGetChangeBrushColorType() = INDI_CHANGE_FOREGROUND_COLOR Then
		DLGQTIGetBinBrush = STLChangeBrushFGColour(mbrsDefaultFill, DLGQTIGetBinColor(nBin))
	Else
		DLGQTIGetBinBrush = STLChangeBrushBGColour(mbrsDefaultFill, DLGQTIGetBinColor(nBin))
	End If
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetBinBrush")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetBinLine( 	ByVal nBin As Integer) As Pen

OnError GoTo ErrorOccured

'	Call DEBUGPrint("DLGQTIGetBinLine: Default Line Pen" & mpenDefaultLine )
'	Call DEBUGPrint("DLGQTIGetBinLine: Changed Line Pen" & STLChangePenColour(mpenDefaultLine, DLGQTIGetBinColor(nBin)) )

	DLGQTIGetBinLine = STLChangePenColour(mpenDefaultLine, DLGQTIGetBinColor(nBin))
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetBinLine")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetBinSymbol(	ByVal nBin As Integer) As Symbol

OnError GoTo ErrorOccured

	DLGQTIGetBinSymbol = STLChangeSymbolColour(msymDefaultSymbol, DLGQTIGetBinColor(nBin))

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetBinSymbol")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetBorderPen() As Pen

OnError GoTo ErrorOccured

	DLGQTIGetBorderPen = mpenDefaultBorder
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetBorderPen")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetBrush() As Brush

OnError GoTo ErrorOccured

	DLGQTIGetBrush = mbrsDefaultFill
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetBrush")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetChangeBrushColorType() As Integer

OnError GoTo ErrorOccured

	DLGQTIGetChangeBrushColorType = Maximum(mnChangeBrushColorType, INDI_CHANGE_FOREGROUND_COLOR)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetChangeBrushColorType")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetLinePen() As Pen

OnError GoTo ErrorOccured

	DLGQTIGetLinePen = mpenDefaultLine
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetLinePen")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGQTIGetSymbol() As Symbol

OnError GoTo ErrorOccured

	DLGQTIGetSymbol = msymDefaultSymbol
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGQTIGetSymbol")
	Call ERRShow()

End Function