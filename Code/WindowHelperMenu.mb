'*******************************************************************************
'**   Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************
' 1.2.0  	21-08-2009 19:50:48 - Support for moving windows into the active area of Pro
' 1.2.1  	31-08-2009 13:37:22 - Checking if a window is valid before applying the settings
' 1.3.0	09-10-2009 14:52:29 - Moved strings into .NET Resource file
' 1.3.1	28-10-2009 09:43:46	- Support for multiple screen resolutions when storing window position and sizes
'						- Support for automatically opening the layer control when the application starts
' 1.3.2	06-11-2009 20:16:56	- Better handling a closed MapBasic window: the window is now set and then closed on startup
' 1.3.3	23-11-2009 21:49:56	- Added support for help file
'						- Changed the look of the Aboutbox
'						- Added Alt shortcuts to the menu items
' 1.3.4	25-11-2009 14:18:31	- Changed a few strings
' 1.3.5	25-11-2009 20:18:00	- Added support for cloning any window type
' 1.5.0	13-01-2010 21:13:46	- Now the user can :
'							- specify to store window positions on exit
'							- specify to restore window positions on startup
'							- store window positions manually
'							- restore window positions manually
' 1.5.1	26-01-2010 20:08:07	- Moved strings to .NET Resource
' 1.5.5	31-03-2010 13:46:59	- Working on support for base map size and positions
'		20-04-2010 08:01:57	- Disabled saving of file and workspace (was ther for debug reason) when closing a window
'						- Saving an active window to a workspace without Open Table statements...
'							- usable for Layout templates
'							- the workspace still refers to names of windows
'						- Special windows are no longer locked by the autolock feature
'						- The window name is now put into {} to better handle ","'s in the name
' 1.5.6	19-08-2010 09:01:56	- Now supports dockíng add in MI Pro 10.5
' 1.5.7	24-03-2011 22:26:43	- WindowHelper dialog has been created as a dockable Window
'							- has a treeview with all window types
'							- the treewiew is updated whenever there s a change in the windows in Mi Pro
'							- WinFocusChangedHandler, WinClosedHandler
' 1.5.8	25-03-2011 21:01:01	- WindowHelper dialog has been improved, it is not more stable
'							- the Closed Window tab now shows the windows that has been closed during the current session
'							- they can be restored
' 1.5.9	25-03-2011 22:32:15	- Fixed the startup bug when no windows where open
' 1.5.10	08-04-2011 21:30:22	- You can now make any window (maps, browser and all special windows etc) dockable
'						- The Autolock feature now works in the WindowHelper dialog
'						- The WindowHelper toolbar has been removed as all features have been added to the WindowHelper dialog
'						- Special windows dockable position are stored on close down - but the special windows are not automatically made dockable on startup
' 1.5.11	09-04-2011 23:20:00	- Better management of closing and opening windows
'						- The buttons now reflect which window is selected
'						- If you double click on a closed window it will be restored
' 1.5.12	12-04-2011 22:12:02	- Added missing Tooltips on Lock select window
'						- Added some extra checking on exit to prevent errors
' 1.5.13	13-04-2011 22:23:28	- Been trying to make the docked windows more stable when closed during a session
'						- The special windows will now open (as a normal or docked) when you double click on them in the list
'						- Cleaned up the Win32Window class - added a Window object to the class and moved some functions to the class
'						- The resource strings have been moved from the WinHelper.dll (now obsolete) to the WindowHelper.dll
' 1.5.14	14-04-2011 11:36:45	- Moved the GetScreenSize to the WindowHelper .NET project
' 1.5.15	03-05-2011 11:21:01	- Window names are now updated when the WinFocusChangedHandler is called (only for the window getting into focus)
' 1.5.16	03-05-2011 22:47:43	- If you double click on a window, you can  now change the name and the size fo the window in a new window
' 1.5.16	25-05-2011 14:28:26	- Removed the ability to open the layer control on start as this now is built into Mi Pro (since 10.5)
'						- Remove any menu items refering to base windows
'						- Recompiled the entire project due to an updated ConfigFileLib
'1.15.17	27-05-2011 14:36:42	- Only document windows are now added to the list of current windows
'1.15.18	03-06-2011 21:41:41	- Remove the print statement from the interopHelper.Do method
'-------------------------------------------------------------------------------
'2.0.1	16-06-2012 22:40:20	- Added "Locate file in Explorer" to Layer Control (Layers) and TableList rightclick menus
'						- Added "Open file in Text Editor" to Layer Control (Layers) and TableList rightclick menus
'						- Added "Close Table" to Layer Control rightclick menu (Layers)
'						- Added "Set default view" to Layer Control rightclick menu (Maps)
'						- Added "Set default view" to Layer Control rightclick menu (Layers)
'						- Added "Zoom Entire Map" to Layer Control rightclick menu (Maps)
'						- Redesigned icons for the Window Helper windoe
'						- Added button for "Modify Window" to the Window Helper window
'						- Added OKButton the the Modify Window dialog
'2.0.2	03-08-2012 12:28:10	- Added support for zoom previous, zoon next, zoom first and zoom last to the WindowHelper window
'						- Added rightclick menu item for cloning a layout window
'						- Now the WindowHelper window shows the name of the currently active window
'						- The WindowHelper window now uses the active window when a button is pushed
'2.0.3	07-08-2012 09:39:18	- Initiates correctly if no windows are open
'						- The Zoom Next/Previous now handles the standard Zoom Previous View correctly
'2.0.4	09-08-2012 08:26:19	- Renamed a number of menu items
'2.0.5	10-08-2012 14:30:37	- Made the tooltips visible in the WindowHelper window again
'2.0.6	27-09-2012 10:29:11	- Added a space before the name of the Text Editor in the "Open in Text Editor" menu items
'2.0.7	28-11-2012 12:57:02	- Final version, releasing it now
'							- moved all strings from the c# code into the resources
'							- improved handling of the size of the window after autohide
'2.0.8	06-12-2012 07:47:23	- Added the ability to open Layer Control and TableList windows on startup
'						- Fixed an issue where storing the window positions didn't save the stored positions to the config file
'2.0.9	13-12-2012 08:34:34	- Added missing call to GetResStr around a few strings in the TableHelper module
'2.0.10	30-01-2013 09:00:30	- The Handlers did at certain occasions send a value of 145 which doesn't refer to any windows in Mi Pro.
'						- these low values are now ignored in the Controller module (.NET)
'2.0.11	12-03-2013 20:51:25	- Close table from the Layer Control crashes the tools when used on a thematic layer.
'							Has been changed to handle the cosmmetic layer and a cosmetic layer differently.
'							- Cosmetic layer is ignored.
'							- Thematic layer is removed from the map window
'2.0.12	26-03-2013 10:55:22	- The speed of showing the tooltips in the WindowHelper window has been improved
'						- The Size of the WindowHelper window is now restored correctly if the window is set to 'Autohide'
'						- The assembly miadm.dll has been renamed to miadm10.5.0.202.dll to remove conflicts with a newer version of this file
'						- the unlock window button is now working correctly again
'						- lock, unlock and autolock windows now updates the buttons state as well
'2.1.0	31-01-2014 14:42:24	- Implemented a tool for creating map extents into cosmetic layer or other tables
'
'3.0.0	20-05-2016 10:00:37	- WindowHelper for x64
'						- Removing features for remembering window sizes and positions
'		18-11-2016 12:10:31	- Creating Map Extents placed on MAP tab in the Options group
'						- Adding InfoSelHandler functionality
'						- Added Advanced Rename Layer functionality, Layer Control Layer context menu
'						- Added Query using Value from selected cell, Browser Context menu and Filter dropdown button
'						- Added Info Tool and Ruler Tool to the Map Mini Toolbar
'3.0.1	18-11-2016 12:10:39	- Fixed tooltip issue with the InfoSelHandler tool
'						- Added Restore Closed Windows (the MapBasic version)
'						- Added Select Within Map Extent
'3.0.2	29-11-2016 21:27:19	- Added Options dialog
'		31-01-2017 11:49:51	- Added Rename Multiple Layers, Layer Control Map context menu
'3.0.2	15-03-2017 14:05:20 - Changed the Aboutbox for ProgramInfo to link to Community Download
'						- Made the icons in the MAP > Options group small
'						- Created a new document for the tool
'3.5.0	10-04-2018 21:48:11	- Added a menu item for cloning a map window via the Layer Control Map Context menu
'						- Added an option for creating a theme from a table/column using the current style from the objects.
'3.5.1	25-04-2018 08:25:59	- Added a function to return Cartographic Scale of a Map window (to be used in a SmartText)
'						- Added a function to return Coordinates from a Map window (to be used in a SmartText)
'3.5.2	09-05-2018 12:18:26	- Added a dialog to show a list of functions that can be used via the new Exec() function
'						- Added Browse in floating window to TABLE tab, including Ctrl+Shift+F4 shortcut
'						- Added Browse in floating window to Table List Table Context menu
'						- Fixed issue: InfoSelHandler State wasn't saved correctly
'3.5.3	18-05-2018 12:37:31	- Fixed ToolTip for Floating Browser window
'3.5.4	22-06-2018 15:07:45	- Added a text showing the number of selected records in the Statusbar
'3.5.5	26-06-2018 10:05:54	- Adding Info and Ruler to Map Mini Toolbar is being ignored for MapInfo Pro 17.0 and newer
'3.5.6	09-08-2018 13:40:44	- Number of selected records now also shows the total number of records in the table
'3.5.7	06-09-2018 10:33:56 - Added Browser Context Menu item to group a table based on the current column
'						- Fixed an issue with "Map Extent Selection" which made the tool not appear
'						- Added icon for "Map Extent Selection"
'3.5.8	11-09-2018 14:53:14	- Changed the text showing number of selected records to appear after text showing name of table Selection is based on (doesn't work)
'3.5.9	18-09-2018 10:12:24	- Shortened a sub procedure to MAPHMenuStaticTheme
'		29-10-2018 12:57:41	- Added RegEx wrappers to TableHelper to be able to publish these to the MapInfo Pro interface
'						- Published functions to the MapInfo Pro interface (only works from v17.0.1):
'							- WINHSetCoordsysUsingTable
'							- STRINGReplace
'							- STRINGGetValueBetweenChars
'							- STRINGConcatenateWithSeparator
'							- STRINGLeftWord
'							- COLExists
'							- COLTypeAsString
'							- TABIsOpen
'							- CONFIGReadKey, CONFIGWriteKey
'							- STLAlterPen, STLAlterBrush, STLAlterSymbol
'							- STLSymbol2Text, STLBrush2Text, STLPen2Text, STLText2Symbol, STLText2Brush, STLText2Pen
'							- OBJDirection
'							- OBJReverse
'							- MAPGetExtent
'							- MAPHGetCoordinate
'							- TABHRegExReplace, TABHRegExIsMatch, TABHRegExFirstMatch
'3.6.0	06-11-2018 14:46:36	- Published functions to the MapInfo Pro interface (only works from v17.0.1):
'							- OBJCartesianCreatePointAlong
'							- WINHSetCoordsysUsingMap
'							- OBJCombineFromTable
'						- Added a new module to Modify Window size and settings
'3.6.1	01-02-2019 15:39:40	- Published some additional functions, mostly for testing purpose
'							- OBJDirectionWtAvg
'							- OBJDirectionMedian
'3.6.2	26-02-2019 14:22:12	- Added a new function to the Browser Context Menu
'							- Zoom to Selection in Front Most Map Window
'						- Moved two functions to the TABHelper module:
'							- TABHFilterBrowserCurrentCell
'							- TABHGroupByCurrentColumn
'							- Added method to set IgnoreTopLeftCell: TABHSetIgnoreTopLeftCell(...)
'3.6.3	26-04-2019 10:21:12	- Published a function to the MapInfo Pro interface (only works from v17.0.1):
'							- STLChangeSymbolColour
'3.7.0	27-01-2020 15:14:19	- Compiled with latest version of the Common MapBasic Libraries
'						- Published a function to the MapInfo Pro interface (only works from v17.0.1):
'							- WHGetColumnValue: can read the value from a specific column of a specific record of the specified table
'							- Renamed the published functions to start with WH (WindowHelper)
'							- Removed a few published functions that merely were for testing
'						- Removed MenuItem that links to the "old" Community Download site
'						- Reintroduced "Save Window to Workspace without 'Open Table' statements"
'						- BaseMapHelper: Lets the user hide Base Map controls from the Open dropdown
'3.7.1	30-01-2020 10:19:36	- Added additional information to the Description of the published functions
'3.8.0	26-01-2022 10:35:48	- Removing commands that have been added to MapInfo Pro v2019/v2021 (Find in Folder)
'						- Fixed issue with Selection Count in Statusbar not showing correct string on load
'						- Images have been made translucent
'						- Menu item in context menus are now ordered using the existing menu item names
'3.9.0	25/10/2022 08.53.38 - Fixing positions of menu item sin context menus
'						- Adding options to insert Smart Text Adornments into map window - for MapInfo Pro v2021 and newer
'							- Map Title, Coordsys Name & Cartographic Scale
'						- Create Quick Ranged Theme via Layer context menu
'3.9.1	14/11/2022 12.31.41	- Fixed an issue in Quick Ranged Theme didn't allow the user to select query layers
'3.9.2	23/11/2022 16.02.18	- Created Individual Theme via Layer context menu
'						- Moved SelInfoHandler, Create Map Extent and Restore windows back to Options group
'3.9.3	24/11/2022 14.40.44	- Copy/Paste layer settings
'						- Fixed an issue using numeric values in Quick Individual Theme
'3.9.5	25/11/2022 10.32.37	- Released version
'						- Renamed some of the Quick Ranged thematics
'3.9.6	30/11/2022 09.36.50	- Added menu item on Layer context menu to refresh filtered layer
'						- Fixed an issue with menu items not getting removed when tool ends
'						- Reordered some controls in the context menus
'4.0.0	29-09-2023 12:01:26	- Now using TAB_GROUP_HOME_WINDOW in stead of TAB_HOME_RECOVER_GRP
'						- Added 'Clear Selection' to Layout tab: Set Layout Selection Clear
'						- Support for default brush, line, pen and symbol for quick individual theme
'						- Support for default brush, line, pen and symbol for quick ranged theme
'4.0.1	07-08-2024 12:50:49	- Fixed issue where line style doesn't work properly for Quick Individula Theme
'						- Menu Item in Layer List context menu gets enabled/disabled based on the type of the selected layer
'*******************************************************************************
'Potential new features:
'	- Add a option to the Layer context menu to move layer to a specific location in the layer list
'	- Rename table via Layer context menu
'	- Rename Layers: Option to specify character(s) to replace underscore with and not jut a space
'	- Add more default Smart Text adornments to the map window, such as copyright
'	- Improve support for copying layer settings: hotlinks, time settings, filter etc
'	- Improve support for pasting specific layer settings, e.g. only style and hotlink etc.
'	- Add support for saving/restoring layer settings to/from the metadata of a table
'	- Add 'Replace Image' to Layout, see https://ideas.precisely.com/ideas/MIPRO-I-1224
'	- Incorporate BorderGrid capabilty, see BorderGrid.mb
'	- Save theme as object style on table for ranged theme
'	- ...
'
'	Not that easy to implement currently
'	- Add zoom to the extent of a selected frame in the layout (make the frame fit in the view).
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Enums.def"
Include "Icons.def"
Include "Menu.def"
Include "IMapInfoPro.def"
Include "RibbonControls.def"

'**default constants...
Include "Library\Defaults.def"
'Include "Library\MI_ICONS_X64.def"
'Include "Library\RibbonElements.def"

Define xProgram 		"WindowHelper"
Define xVersion 		"4.1.0"
Define xYear			"2024"

Define FILE_INI			GetFolderPath$(FOLDER_MI_PREFERENCE) & xProgram & ".ini"
Define FILE_DBG			ApplicationDirectory$() & xProgram & ".dbg"
Define FILE_HLP			ApplicationDirectory$() + xProgram 	'& ".pdf"
Define PATH_IMAGES			ApplicationDirectory$() & "Images\"

'-------------------------------------
Include "Library\DEBUGLib.def"
Include "Library\CONFIGFILELib.def"
Include "Library\ERRORLib.def"
Include "Library\FILELib.def"
Include "Library\LAYOUTLib.def"
Include "Library\ProgramInfo.def"
Include "Library\OBJLib.def"
Include "Library\RIBBONLib.def"
Include "Library\SYSTEMLib.def"
Include "Library\STYLELib.def"
Include "Library\TABLELib.def"
Include "Library\WINAPI 1522.def"

Include "DLGModifyWindow.def"
Include "DLGWHOWindowHelperOptions.def"
Include "MapHelper.def"
Include "TableHelper.def"
Include "WindowHelper.def"
Include "MAPEXTCreate.def"
Include "DLGExecFunctions.def"
Include "BaseMapsHelper.def"

Include "WindowHelper.Assembly.def"
Include "SelInfoHandler.def"

'-----------------------------------------------------------------------------------------
Declare Sub Main
Declare Sub MENUPublishFunctionsToMapInfoProInterface
Declare Sub MENUBuildRibbonInterface

Declare Sub EndProgram

Declare Sub Endhandler
Declare Sub WinClosedHandler
Declare Sub WinFocusChangedHandler
Declare Sub WinChangedHandler
Declare Sub SelChangedHandler
Declare Sub MENULayerSelectionChanged(ByVal args As This)
Declare Sub MENULayoutSelectionChanged(ByVal args As This)

Declare Sub MENURefreshLayoutControls
Declare Sub MENURefreshLayerListControls

Declare Sub MENUInitializeMenuItems

Declare Sub MENUReadIniFile
Declare Sub MENUWriteIniFile

Declare Sub MENUOptions

Declare Sub MENUFilterBrowserCurrentCell
Declare Sub MENUGroupByCurrentColumn

Declare Sub MENUSaveWindowToWorkspace
Declare Sub MENUMapDrawHandler(ByVal arg as This)

Dim	dtStart as DateTime
'**********************************************************************************************''
'**   Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'
'**********************************************************************************************''
Sub Main

OnError GoTo ErrorOccured

	If NOT SystemInfo(SYS_INFO_MAPINFO_INTERFACE) = MIINTERFACE_RIBBON Then
		Note "This application is designed for a 64 bit version of MapInfo Pro. The application will close now!"
		End Program
	End If

	'***Enabling Debug if file exists
	Call DEBUGEnableByFile(FILE_DBG)
	Call DEBUGPrint("----------------------------------------------------------------------------------------------")
	Call DEBUGPrint("Application " & PRGIGetApplicationName() & " " & xVersion & " started")

	'***Reading configuration file
	Call MENUReadIniFile

'	Currently WindowHelper is using resources in a DLL, not in a String file
'	Call RESSTRNGSetCharSet("UTF-8")
'	Call RESSTRNGSetStringFilesFolder(ApplicationDirectory$() & "Strings\")
'	Call PRGISetApplicationUseLanguageCode(TRUE)
'	Call PRGILoadLanguageStrings(msLanguage)

	'***Initializing ApplicationInfo
	Call PRGISetApplicationName(xProgram)
	Call PRGISetApplicationVersion(xVersion)
	Call PRGISetApplicationCopyrightYear(xYear)
	Call PRGISetApplicationImageUri(PATH_IMAGES & "MapWindowAutoLock_32x32.png")
	Call PRGISetApplicationDevelopedBy("Peter Horsbøll Møller")
	Call PRGISetDescription(GetResItemStr("STR_APPLICATION_DESCRIPTION"))

	Call PRGISetApplicationHelpFile(FILE_HLP & ".PDF")

	'***Initializing BaseWindows module
'	Call BWINSetIniFile(FILE_INI)
	Call MAPEXTSetIniFile(FILE_INI)
	Call SELINFOSetConfigFile(FILE_INI)
	Call WINHSetConfigFile(FILE_INI)

	Call SELINFOSetImageFolder(PATH_IMAGES)
	Call WINHSetImageFolder(PATH_IMAGES)

	Call MENUBuildRibbonInterface

	Call BMHELPInitialise(FILE_INI)

	Call SELINFOSwitchDisplay

	'***Subscribing to events
	If NOT RBNEventSubscribe(AddInEvents_TableClosed, "SELINFOTableClosedHandler") Then
		Call DEBUGPrint("SELINFOTableClosedHandler was not subscribed to the 'TableClosed' event!")
	End If
	If NOT RBNEventSubscribe(AddInEvents_LayerSelectionChanged, "MENULayerSelectionChanged") Then
		Call DEBUGPrint("MENULayerSelectionChanged was not subscribed to the 'LayerSelectionChanged' event !")
	End If
	If NOT RBNEventSubscribe(AddInEvents_LayoutSelectionChanged, "MENULayoutSelectionChanged") Then
		Call DEBUGPrint("MENULayoutSelectionChanged was not subscribed to the 'LayoutSelectionChanged' event !")
	End If
'	Call DEBUGPrint("Subscribing to MapDraw...")
'	If NOT RBNEventSubscribe(AddInEvents_MapDraw, "MENUMapDrawHandler") Then
'		Call DEBUGPrint("MENUMapDrawHandler was not subscribed!")
'	Else
'		Call DEBUGPrint("MENUMapDrawHandler was successfully subscribed!")
'	End If

	Call MENUPublishFunctionsToMapInfoProInterface

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "Main")
	Call ERRShow()
	Resume Next

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MENUPublishFunctionsToMapInfoProInterface

Dim	nResult As Integer

OnError GoTo ErrorOccured

	If SystemInfo(SYS_INFO_MIFULLVERSION) < 1701 Then
		'**Requires at least v17.0.1 to work
		Exit Sub
	End If

	'**WindowHelper, specific functions
	nResult = RBNRegisterFunctionAsPublic("WINHSetCoordsysUsingTable", "WHSetCoordsysUsingTable", "Set the coordinatesystem to use in WindowHelper using a table." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("WINHSetCoordsysUsingMap", "WHSetCoordsysUsingMap", "Set the coordinatesystem to use in WindowHelper using a map window." & lf & "Function published from the " & xProgram & " application.")

	nResult = RBNRegisterFunctionAsPublic("TABHGetSelectionValue", "WHGetSelectionValue", "Returns the value from the specified column of the current selection." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("TABHCGetColumnValue", "WHGetColumnValue", "Returns the value from the specified column of the specified table." & lf & "Function published from the " & xProgram & " application.")

	'**mbLibrary, general functions
	nResult = RBNRegisterFunctionAsPublic("STRINGReplace", "WHReplace$", "Search for a substring and replace it with another substring." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("STRINGGetValueBetweenChars", "WHExtractValueBetweenChars$", "Extract the value between the two given characters." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("STRINGConcatenateWithSeparator", "WHCombineWithSeparator$", "Combine the two values witht he separator given." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("STRINGLeftWord", "WHLeftWord$", "Extracts a specific word from a string of words separated by spaces." & lf & "Function published from the " & xProgram & " application.")

	nResult = RBNRegisterFunctionAsPublic("COLExists", "WHColumnExists", "Returns true/1 if the specified column exists in the specified table." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("COLTypeAsString", "WHColumnTypeAsString", "Return string containing the column type (e.g. 'Logical'), including the column width (e.g. 'Char (49)')." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("TABIsOpen", "WHTableIsOpen", "Returns true/1 if the table is open." & lf & "Function published from the " & xProgram & " application.")

	nResult = RBNRegisterFunctionAsPublic("CONFIGReadKey", "WHConfigReadKey", "Returns the value read from the key specified, or '' if key wasn't found." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("CONFIGWriteKey", "WHConfigWriteKey", "Writes the specified value to the section and key in the file specifed." & lf & "Function published from the " & xProgram & " application.")

	nResult = RBNRegisterFunctionAsPublic("STLAlterPen", "WHAlterPen", "Return the input object (linear and surfaces only) with a different style." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("STLAlterBrush", "WHAlterBrush", "Return the input object (surfaces only) with a different style." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("STLAlterSymbol", "WHAlterSymbol", "Return the input object (points only) with a different style." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("STLSymbol2Text", "WHSymbol2Text", "Returns a string illustrating the Symbol." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("STLBrush2Text", "WHBrush2Text", "Returns a Text illustrating the Brush." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("STLPen2Text", "WHPen2Text", "Returns a Text illustrating the Pen." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("STLText2Symbol", "WHText2Symbol", "Return the Symbol from the text." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("STLText2Brush", "WHText2Brush", "Return the Brush from the text." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("STLText2Pen", "WHText2Pen", "Return the Pen from the text." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("STLChangeSymbolColour", "WHChangeSymbolColor", "Change the color of a symbol style." & lf & "Function published from the " & xProgram & " application.")

'	nResult = RBNRegisterFunctionAsPublic("OBJDirection", "WHOBJDirection", "Calculates the direction of the object." & lf & "Function published from the " & xProgram & " application.")
'	nResult = RBNRegisterFunctionAsPublic("OBJDirectionWtAvg", "WHOBJDirectionWtAvg", "Calculates the WtAvg direction of the object." & lf & "Function published from the " & xProgram & " application.")
'	nResult = RBNRegisterFunctionAsPublic("OBJDirectionMedian", "WHOBJDirectionMedian", "Calculates the Median direction of the object." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("OBJReverse", "WHObjectReverse", "Reverses the direction of lines and polylines." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("OBJCartesianCreatePointAlong", "WHCartesianCreatePointAlong", "Creates a point along a line or single segment polyline." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("OBJSetCentroidXY", "WHSetCentroidXY", "Changes the centroid to a given coordinate." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("OBJSetCentroid", "WHSetCentroid", "Changes the centroid to a given point object." & lf & "Function published from the " & xProgram & " application.")
'	nResult = RBNRegisterFunctionAsPublic("OBJCombineFromTable", "WHCombineFromTable", "Combines objects from a table, optionally specify a column and a value." & lf & "Function published from the " & xProgram & " application.")

	nResult = RBNRegisterFunctionAsPublic("DEBUGEnable", "WHDebugEnable", "Enables debug mode in WindowHelper." & lf & "Function published from the " & xProgram & " application.")

	nResult = RBNRegisterFunctionAsPublic("MAPGetExtent", "WHMapGetExtent", "Returns the Extent of the specified map window as a spatial object." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("MAPHGetCoordinate", "WHMAPGetCoordinate", "Returns MINX/MAXX/MINY/MAXY/CENTERX/CENTERY coordinate from map window specified." & lf & "Function published from the " & xProgram & " application.")

	nResult = RBNRegisterFunctionAsPublic("TABHRegExReplace", "WHRegExReplace", "Searches for a match and returns the string where the string has been replaced." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("TABHRegExIsMatch", "WHRegExIsMatch", "Searches for a match and returns true if one was found." & lf & "Function published from the " & xProgram & " application.")
	nResult = RBNRegisterFunctionAsPublic("TABHRegExFirstMatch", "WHRegExFirstMatch", "Searches for a match and returns thr first match." & lf & "Function published from the " & xProgram & " application.")

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUPublishFunctionsToMapInfoProInterface")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENUBuildRibbonInterface

Dim	nCtrlIdx As Integer,
	sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName As String,
	sTextEditorExe, sTextEditor As String
Dim i, nNumControls, nContextMenuID as integer,
	rbnElement, rbnCntxtMenu, rbnControlCollection As This

OnError GoTo ErrorOccured

	'***************************************************************
	'M A P    M I N I    T O O L B A R
	'***************************************************************
	If SystemInfo(SYS_INFO_MIVERSION) < 1700 Then
		If DLGWHOGetAddInfoToolToMTB() OR DLGWHOGetAddRulerToolToMTB() Then
			nCtrlIdx = RBNMapMTBInsertStackPanelAfter("stpWindowHelper", "Info", "MapTools2")
			If nCtrlIdx > 0 Then
				Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)

				If DLGWHOGetAddInfoToolToMTB() Then
					nCtrlIdx	= RBNMapMTBStackPanelAddControl("stptbtInfoTool", "", ""
												, ControlType_ToolButton, "stpWindowHelper")
					If nCtrlIdx > 0 Then
						Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("STR_TTIP_INFO_TOOL"), "")
						Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_INFOTOOL_16, "")
						Call RBNControlSetCmdIDIdx(nCtrlIdx, M_TOOLS_PNT_QUERY)
					End If
				End If

				If DLGWHOGetAddRulerToolToMTB() Then
					nCtrlIdx	= RBNMapMTBStackPanelAddControl("stptbtRuler", "", ""
												, ControlType_ToolButton, "stpWindowHelper")
					If nCtrlIdx > 0 Then
						Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("STR_TTIP_RULER_TOOL"), "")
						Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_WIN_RULER_16, "")
						Call RBNControlSetCmdIDIdx(nCtrlIdx, M_TOOLS_RULER)
					End If
				End If
			End If
		End If
	End If

	'********************************************************************************
	'A D D I N G    C O N T R O L S    T O    T H E    R I B B O N    -    M A P
	'********************************************************************************
	sTabName		= TAB_MAP
	sGroupName	= TAB_MAP_OPTIONS_GRP	'TAB_MAP_FILE_GRP

	nCtrlIdx = RBNGroupAddButton("btnMapMapExtent", GetResItemStr("MNU_CREATE_MAP_EXTENT"), "", sTabName, sGroupName)
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_CREATE_MAP_EXTENT"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, "", PATH_IMAGES & "MapWindowExtent_32x32.png")
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPEXTCreateMenu")
	End If

	'I N F O S E L C H A N G E D    H A N D L E R
	'**Adding to the Ribbon, MAP Tab
	nCtrlIdx	= RBNGroupAddButton("btnSelInfoHandler", GetResItemStr("STR_BTN_SEL_INFO_HANDLER"), "", sTabName, sGroupName)
	If nCtrlIdx > 0 Then
		Call SELINFOSetControlIndex(nCtrlIdx)
		Call RBNControlToggleIdx(nCtrlIdx, TRUE)
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("STR_TTIP_ENABLE_INFO_SEL"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, "", PATH_IMAGES & "InfoSelHandler_32x32.png")
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "SELINFOSwitchDisplay")
	End If

	nCtrlIdx = RBNGroupAddButton("btnMapRestoreClosedWindows", GetResItemStr("MNU_RESTORE_CLOSED_WINDOWS"), "", sTabName, sGroupName)
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_RESTORE_CLOSED_WINDOWS"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, "", PATH_IMAGES & "WindowRestore_32x32.png")
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHRestoreWindowMenu")
	End If

	sTabName		= TAB_MAP
	sGroupName	= TAB_MAP_FILE_GRP

	nCtrlIdx = RBNGroupInsertControlAfter("btnMapStaticTheme", GetResItemStr("MNU_STATIC_THEME"), "", ControlType_Button, sTabName, sGroupName, "MapAddThematicButton")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_STATIC_THEME"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, MI_IMG_MAP_ADDTHEME_16, MI_IMG_MAP_ADDTHEME_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHMenuStaticTheme")
	End If

	nCtrlIdx = RBNGroupInsertControlAfter("btnMapThemeSaveToTable", GetResItemStr("MNU_THEME_SAVE_TO_TABLE"), "", ControlType_Button, sTabName, sGroupName, "btnMapStaticTheme")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_THEME_SAVE_TO_TABLE"), GetResItemStr("MNU_HLP_ONE_LAYER_THEMATIC_DISABLED"))
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, PATH_IMAGES & "ThemeSave_16x16.png", PATH_IMAGES & "ThemeSave_32x32.png")
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHMenuSaveThemeStylesToTable")
	End If

	sTabName		= TAB_MAP
	sGroupName	= TAB_MAP_SELECTION_GRP

	nCtrlIdx = RBNSplitButtonGroupAddControl("btnMapSelectWithinMap", GetResItemStr("MNU_SELECT_WITHIN_MAP"), "", ControlType_Button, sTabName, sGroupName, "MapSelectionToolsSplitButton", "SelectionDownMenuGroup")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_SELECT_WITHIN_MAP"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, "", PATH_IMAGES & "SelectWithinMap_32x32.png")
		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0.0)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHSelectWithinMap")
	End If

	If SystemInfo(SYS_INFO_MIVERSION) >= 2100 Then
		sTabName		= TAB_MAP
		sGroupName	= TAB_MAP_FILE_GRP

		nCtrlIdx = RBNSplitButtonGroupAddControl("btnMapSmartTextMapTitle", GetResItemStr("MNU_ADD_SMARTTEXT_MAP_TITLE"), "", ControlType_Button, sTabName, sGroupName, "AddToMapSplitButton", "AddToMapDropDownMenuGroup")
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_ADD_SMARTTEXT_MAPTITLE"), GetResItemStr("TTIP_NO_MAPPER_DISABLED"))
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, MI_IMG_MAP_SMARTTEXT_ADORN_16, MI_IMG_MAP_SMARTTEXT_ADORN_32)
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0.0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHAddSmartTextMapTitle")
		End If

		nCtrlIdx = RBNSplitButtonGroupAddControl("btnMapSmartTextCartoScale", GetResItemStr("MNU_ADD_SMARTTEXT_CART_SCALE"), "", ControlType_Button, sTabName, sGroupName, "AddToMapSplitButton", "AddToMapDropDownMenuGroup")
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_ADD_SMARTTEXT_CART_SCALE"), GetResItemStr("TTIP_NO_MAPPER_DISABLED"))
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, MI_IMG_MAP_SMARTTEXT_ADORN_16, MI_IMG_MAP_SMARTTEXT_ADORN_32)
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0.0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHAddSmartTextMapCartoScale")
		End If

		nCtrlIdx = RBNSplitButtonGroupAddControl("btnMapSmartTextCoordsys", GetResItemStr("MNU_ADD_SMARTTEXT_COORSYS"), "", ControlType_Button, sTabName, sGroupName, "AddToMapSplitButton", "AddToMapDropDownMenuGroup")
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_ADD_SMARTTEXT_COORSYS"), GetResItemStr("TTIP_NO_MAPPER_DISABLED"))
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, MI_IMG_MAP_SMARTTEXT_ADORN_16, MI_IMG_MAP_SMARTTEXT_ADORN_32)
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0.0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHAddSmartTextMapCoordsys")
		End If
	End If

'	nCtrlIdx = RBNGroupAddButton("MapAutolockWindows", GetResItemStr("MNU_AUTOLOCK_WINDOWS"), "", sTabName, sGroupName)
'	If nCtrlIdx > 0 Then
'		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_AUTOLOCK_WINDOWS_OFF"), "")
'		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, PATH_IMAGES & "WindowAutoLockOff_16x16.png", PATH_IMAGES & "WindowAutoLockOff_32x32.png")
'		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHAutoLockWindowSwitchMenu")
'		Call WINHSetAutoLockWindowsIndex(nCtrlIdx)
'	End If
'	nCtrlIdx = RBNGroupAddButton("MapLockWindow", GetResItemStr("MNU_LOCK_WINDOW"), "", sTabName, sGroupName)
'	If nCtrlIdx > 0 Then
'		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_LOCK_WINDOW"), "")
'		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, PATH_IMAGES & "WindowLock_16x16.png", PATH_IMAGES & "WindowLock_32x32.png")
'		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHLockWindowMenu")
'	End If
'	nCtrlIdx = RBNGroupAddButton("MapUnlockWindow", GetResItemStr("MNU_UNLOCK_WINDOW"), "", sTabName, sGroupName)
'	If nCtrlIdx > 0 Then
'		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_UNLOCK_WINDOW"), "")
'		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, PATH_IMAGES & "WindowUnlock_16x16.png", PATH_IMAGES & "WindowUnlock_32x32.png")
'		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHUnlockWindowMenu")
'	End If

	'Z O O M    N E X T    A N D    P R E V I O U S
'	sTabName				= TAB_MAP
'	sGroupName			= TAB_GROUP_MAP_NAVIGATE
'	nCtrlIdx = RBNGroupAddButton("MENUZoomFirstExtent", GetResItemStr("MNU_HLP_ZOOM_TO_FIRST"), "", sTabName, sGroupName)
'	If nCtrlIdx > 0 Then
'		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Initial View", "")
'		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, PATH_IMAGES & "MapWindowZoomFirst_16x16.png", "")
'		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHZoomFirstMapExtent")
'	End If
'	nCtrlIdx = RBNGroupAddButton("MENUZoomFirstPrevios", "Previous", "", sTabName, sGroupName)
'	If nCtrlIdx > 0 Then
'		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_ZOOM_TO_PREVIOUS"), "")
'		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, PATH_IMAGES & "MapWindowZoomPrev_16x16.png", "")
'		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHZoomPreviousMapExtent")
'	End If
'	nCtrlIdx = RBNGroupAddButton("MENUZoomFirstPrevios", "Next", "", sTabName, sGroupName)
'	If nCtrlIdx > 0 Then
'		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_ZOOM_TO_NEXT"), "")
'		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, PATH_IMAGES & "MapWindowZoomNext_16x16.png", "")
'		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHZoomNextMapExtent")
'	End If


	'********************************************************************************
	'A D D I N G    C O N T R O L S    T O    T H E    R I B B O N    -    H O M E
	'********************************************************************************
	sTabName		= TAB_HOME
	sGroupName	= TAB_HOME_WINDOW_GRP	'TAB_HOME_RECOVER_GRP

	nCtrlIdx = RBNGroupAddButton("HomeRestoreClosedWindows", GetResItemStr("MNU_RESTORE_CLOSED_WINDOWS"), "", sTabName, sGroupName)
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_RESTORE_CLOSED_WINDOWS"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, PATH_IMAGES & "WindowRestore_16x16.png", PATH_IMAGES & "WindowRestore_32x32.png")
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHRestoreWindowMenu")
	End If

	nCtrlIdx = RBNGroupAddButton("HomeModifyWindow", GetResItemStr("MNU_MODIFY_WINDOW"), "", sTabName, sGroupName)
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_MODIFY_WINDOW"), GetResItemStr("TTIP_MODIFY_WINDOW_DISABLED"))
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, PATH_IMAGES & "ModifyWindow_32x32.png", PATH_IMAGES & "ModifyWindow_32x32.png")
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHModifyWindow")
	End If

'	nCtrlIdx = RBNGroupAddButton("HomeAutolockWindows", GetResItemStr("MNU_AUTOLOCK_WINDOWS"), "", sTabName, sGroupName)
'	If nCtrlIdx > 0 Then
'		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_AUTOLOCK_WINDOWS_OFF"), "")
'		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, PATH_IMAGES & "WindowAutoLockOff_16x16.png", PATH_IMAGES & "WindowAutoLockOff_32x32.png")
'		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHAutoLockWindowSwitchMenu")
'		Call WINHSetAutoLockWindowsIndex(nCtrlIdx)
'	End If
'	nCtrlIdx = RBNGroupAddButton("HomeLockWindow", GetResItemStr("MNU_LOCK_WINDOW"), "", sTabName, sGroupName)
'	If nCtrlIdx > 0 Then
'		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_LOCK_WINDOW"), "")
'		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, PATH_IMAGES & "WindowLock_16x16.png", PATH_IMAGES & "WindowLock_32x32.png")
'		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHLockWindowMenu")
'	End If
'	nCtrlIdx = RBNGroupAddButton("HomeUnlockWindow", GetResItemStr("MNU_UNLOCK_WINDOW"), "", sTabName, sGroupName)
'	If nCtrlIdx > 0 Then
'		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_UNLOCK_WINDOW"), "")
'		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, PATH_IMAGES & "WindowUnlock_16x16.png", PATH_IMAGES & "WindowUnlock_32x32.png")
'		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHUnlockWindowMenu")
'	End If

	'********************************************************************************
	sTabName		= TAB_HOME
	sGroupName	= TAB_HOME_OUTPUT_GRP

	nCtrlIdx = RBNGroupAddButton("HomeSaveWindowToWorkspace", GetResItemStr("MNU_SAVE_WINDOW_TO_WOR"), "", sTabName, sGroupName)
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_SAVE_WINDOW_TO_WOR"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, MI_IMG_WIN_EXPORTIMAGE_16, MI_IMG_WIN_EXPORTIMAGE_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHSaveWindowToWorkspace")
	End If

	'********************************************************************************
	'A D D I N G    C O N T R O L S    T O    T H E    R I B B O N    -    T A B L E
	'********************************************************************************
	sTabName		= TAB_TABLE
	sGroupName	= TAB_TABLE_DATA_GRP
	nCtrlIdx = RBNGroupInsertButton("tabBrowserFloating", GetResItemStr("MNU_BROWSER_FLOATING"), "", sTabName, sGroupName, 1)
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName() & " (Ctrl+Shift+F4)", GetResItemStr("MNU_HLP_BROWSER_FLOATING"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, MI_IMG_LAY_NEWBROWSER_16, MI_IMG_LAY_NEWBROWSER_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHBrowserFloating")
		Call RBNControlSetKeyGestureIdx(nCtrlIdx, "Ctrl+Shift+F4")
	End If

	sGroupName	= TAB_TABLE_SORT_GRP
	nCtrlIdx = RBNDropDButtonGroupAddControl("tabdbgFilterCellValue", GetResItemStr("MNU_FILTER_USING_CELL_VALUE_SHORT"), ""
				, ControlType_Button, sTabName, sGroupName, "FilterDropDown", "FilterDropDownMenuGroup")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_FILTER_USING_CELL_VALUE"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, MI_IMG_TAB_FILTER_16, "")
		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "TABHFilterBrowserCurrentCell")
	End If

	'********************************************************************************
	'A D D I N G    C O N T R O L S    T O    T H E    R I B B O N    -    L A Y O U T
	'********************************************************************************
	sTabName		= TAB_LAYOUT
	sGroupName	= "LayoutEdit"
	nCtrlIdx = RBNGroupAddControl("tabLayoutEditText", GetResItemStr("MNU_LAYOUT_EDIT_TEXT"), "", ControlType_Button, sTabName, sGroupName)
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_LAYOUT_EDIT_TEXT"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, MI_IMG_LAY_INSERTTEXTBOX_16, MI_IMG_LAY_INSERTTEXTBOX_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHLayoutEditText")
	End If

	sGroupName	= "LayoutArrange"
	nCtrlIdx = RBNGroupInsertControlAfter("tabLayoutClearSelection", GetResItemStr("MNU_CLEAR_SELECTION"), "", ControlType_Button, sTabName, sGroupName, BTN_LAYOUT_SELECT)	'"LayoutSelectButton"
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_LAYOUT_CLEAR_SELECTION"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, MI_IMG_MAP_CLEAR_16, MI_IMG_MAP_CLEAR_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHLayoutClearSelection")
	End If

	'***************************************************************
	'M A P P E R   C O N T E X T   M E N U
	'***************************************************************
	nCtrlIdx = RBNCntxtMenuAddMenuItem(MenuId_MapperShortcut, "mapCntxtMapExtent", GetResItemStr("MNU_CREATE_MAP_EXTENT") & "...", "")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_CREATE_MAP_EXTENT"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, "", PATH_IMAGES & "MapWindowExtent_24x24.png")
		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPEXTCreateMenu")
	End If

	If DLGWHOAddItemToContextMenu(MAP_CTXT_WORKSPACE_EXPLORER) Then
		nCtrlIdx = RBNCntxtMenuInsertMenuItem(MenuId_MapperShortcut, "mapCntxtExplorerWindow", GetResItemStr("MNU_OPEN_WORKSPACE_EXPLORER"), "", 0)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_WORKSPACE_EXPLORER"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_WIN_WOREXPLORERWIN_16, MI_IMG_WIN_WOREXPLORERWIN_32)
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCmdIDIdx(nCtrlIdx, M_VIEW_WORKSPACE_EXPLORER)
		End If

		'*Adding a separator that will appear under Open Workspace Explorer
		nCtrlIdx = RBNCntxtMenuInsertMenuItem(MenuId_MapperShortcut, "mapCntxtMapSeparator1", "(-", "", 1)
	End If

	'***************************************************************
	' B R O W S E R   C O N T E X T   M E N U
	'***************************************************************
	If DLGWHOAddItemToContextMenu(BRWS_CTXT_FILTER_CELL_VALUE) Then
		nCtrlIdx = RBNCntxtMenuInsertMenuItem(MenuId_BrowserShortcut, "brwsCntxtFilterCellValue", GetResItemStr("MNU_FILTER_USING_CELL_VALUE"), "", 4)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_FILTER_USING_CELL_VALUE"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_TAB_FILTER_16, MI_IMG_TAB_FILTER_32)
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "TABHFilterBrowserCurrentCell")
		End If
	End If
	If DLGWHOAddItemToContextMenu(BRWS_CTXT_GROUP_BY_CURR_COL) Then
		nCtrlIdx = RBNCntxtMenuInsertMenuItem(MenuId_BrowserShortcut, "brwsCntxtGroupByColumn", GetResItemStr("MNU_GROUP_BY_CURRENT_COLUMN"), "", 5)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_GROUP_BY_CURRENT_COLUMN"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_TAB_FINDMAPSELECTION_16, "")
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "TABHGroupByCurrentColumn")
		End If
	End If
	If DLGWHOAddItemToContextMenu(BRWS_CTXT_ZOOM_TO_SEL) Then
		nCtrlIdx = RBNCntxtMenuInsertMenuItem(MenuId_BrowserShortcut, "brwsCntxtZoomToSelection", GetResItemStr("MNU_ZOOM_TO_SELECTION_FRONT_MAP"), "", 0)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_ZOOM_TO_SELECTION_FRONT_MAP"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_ZOOMTOEXTENTSEL_16, "")
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHZoomToSelectionInFrontMap")
		End If
	End If
	If DLGWHOAddItemToContextMenu(BRWS_CTXT_PAN_TO_SEL) Then
		nCtrlIdx = RBNCntxtMenuInsertMenuItem(MenuId_BrowserShortcut, "brwsCntxtPanToSelection", GetResItemStr("MNU_PAN_TO_SELECTION_FRONT_MAP"), "", 1)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_PAN_TO_SELECTION_FRONT_MAP"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_ZOOMTOENTIREMAP_16, "")
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHPanToSelectionInFrontMap")
		End If
	End If
	If DLGWHOAddItemToContextMenu(BRWS_CTXT_CLEAR_SEL) Then
		nCtrlIdx = RBNCntxtMenuAddMenuItem(MenuId_BrowserShortcut, "brwsCntxtClearSelection", GetResItemStr("MNU_CLEAR_SELECTION"), "")
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_CLEAR_SELECTION"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_CLEAR_16, "")
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCmdIDIdx(nCtrlIdx, M_QUERY_UNSELECT)
		End If
	End If

	'***************************************************************
	' L A Y O U T   F R A M E   C O N T E X T   M E N U
	'***************************************************************
	nCtrlIdx = RBNCntxtMenuInsertMenuItem(MenuId_LayoutFrameShortcut, "layCntxtLayoutEditText", GetResItemStr("MNU_LAYOUT_EDIT_TEXT") & "...", "", 6)
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_LAYOUT_EDIT_TEXT"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_LAY_INSERTTEXTBOX_16, MI_IMG_LAY_INSERTTEXTBOX_32)
		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHLayoutEditText")
	End If

	'***************************************************************
	' L A Y E R   L I S T   M A P   C O N T E X T   M E N U
	'***************************************************************
	If SystemInfo(SYS_INFO_MIVERSION) < 2100 Then
'		'**Adding a menu item as the third menu item on the Mapper Context menu
		nCtrlIdx = RBNCntxtMenuInsertMenuItem(MenuId_LcMapsShortcut, "exmapCntxtRenameLayers", GetResItemStr("MNU_MULTIPLE_LAYERS_RENAME") & "...", "", 2)
	Else
'		'**With versions of MapInfo Pro newer than v2100 context menu items have been given a static name
		nCtrlIdx = RBNCntxtMenuInsertMenuItemAfter(MenuId_LcMapsShortcut, "exmapCntxtRenameLayers", GetResItemStr("MNU_MULTIPLE_LAYERS_RENAME") & "...", "", "MenuItem_LcRenameMap")
	End If
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_MULTIPLE_LAYERS_RENAME"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_TAB_RENAMETABLE_16, MI_IMG_TAB_RENAMETABLE_32)
		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHRenameMultipleLayersLC")
	End If

	nCtrlIdx = RBNCntxtMenuInsertMenuItem(MenuId_LcMapsShortcut, "exmapCntxtZoomEntireMap", GetResItemStr("MNU_VIEW_ENTIRE_MAP"), "", 1)
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_VIEW_ENTIRE_MAP"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_ZOOMTOENTIREMAP_16, MI_IMG_MAP_ZOOMTOENTIREMAP_32)
		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHZoomEntireMapLC")
	End If

'	nCtrlIdx = RBNCntxtMenuAddMenuItem(MenuId_LcMapsShortcut, "exmapCntxtDefaultView", GetResItemStr("MNU_SET_DEFAULT_VIEW_ALL_LAYERS"), "")
'	If nCtrlIdx > 0 Then
'		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_SET_DEFAULT_VIEW_ALL_LAYERS"), "")
'		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, "", PATH_IMAGES & "DefaultView_24x24.png")
'		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
'		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHSetDefaultViewAllLayers")
'	End If

	nCtrlIdx = RBNCntxtMenuAddMenuItem(MenuId_LcMapsShortcut, "exmapCntxtCloneMap", GetResItemStr("MNU_CLONE_MAP"), "")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_CLONE_MAP"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_CLONEMAP_16, MI_IMG_MAP_CLONEMAP_32)
		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHCloneMapLC")
	End If

	'Get the specific Context menu
	rbnCntxtMenu = ICntxtMnusGetCntxtMnu(theContextMenus, MenuId_LcMapsShortcut)
	'*Get the controls collection of this context menu
	rbnControlCollection = GetICntxtMnuCtrls(rbnCntxtMenu)

	nNumControls = GetMICtrlCollCount(rbnControlCollection)
	For i = 1 To nNumControls
		rbnElement = GetMICtrlCollItemInt(rbnControlCollection, (i - 1))
		If RBNControlGetNameThs(rbnElement) In ("MenuItem_ViewEntireMap") Then
			Call RBNControlSetVisibilityThs(rbnElement, FALSE)
			Exit For
		End If
	Next
	'***************************************************************
	' L A Y E R   L I S T   L A Y E R S   C O N T E X T   M E N U
	'***************************************************************
	If SystemInfo(SYS_INFO_MIVERSION) < 2100 Then
'		'**Adding a menu item as the fifth menu item on the Mapper Context menu
		nCtrlIdx = RBNCntxtMenuInsertMenuItem(MenuId_LcLayersShortcut, "exmapCntxtZoomSelectedLayers", GetResItemStr("MNU_VIEW_ENTIRE_LAYERS"), "", 4)
	Else
'		'**With versions of MapInfo Pro newer than v2100 context menu items have been given a static name
		nCtrlIdx = RBNCntxtMenuInsertMenuItemAfter(MenuId_LcLayersShortcut, "exmapCntxtZoomSelectedLayers", GetResItemStr("MNU_VIEW_ENTIRE_LAYERS"), "", "MenuItem_LcViewEntireLayer")
	End If

	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_VIEW_ENTIRE_LAYERS"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_ZOOMTOENTIRELAYER_16, MI_IMG_MAP_ZOOMTOENTIRELAYER_32)
		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHZoomToSelectedLayersLC")
	End If

	'**Adding a menu item to the Layers Context menu
	If DLGWHOAddItemToContextMenu(LYR_CTXT_CLOSE_TABLE) Then
		nCtrlIdx = RBNCntxtMenuAddMenuItem(MenuId_LcLayersShortcut, "exlyrCntxtCntxtCloseTable", GetResItemStr("MNU_CLOSE_TABLE"), "")
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_CLOSE_TABLE"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, "", PATH_IMAGES & "Close Table 24x24.png")
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "TABHCloseTableLC")
		End If
	End If

	If DLGWHOAddItemToContextMenu(LYR_CTXT_SHOW_IN_WIN_EXPLORER) Then
		nCtrlIdx = RBNCntxtMenuAddMenuItem(MenuId_LcLayersShortcut, "exlyrCntxtLocateInExplorer", GetResItemStr("MNU_LOCATE_FILE_IN_EXPLORER"), "")
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_LOCATE_FILE_IN_EXPLORER"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, PATH_IMAGES & "Windows Explorer 16x16.png", "")
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "TABHLocateTabFileLC")
		End If
	End If

	If SystemInfo(SYS_INFO_MIVERSION) < 2100 Then
		'**Adding a menu item as the fourth menu item on the Mapper Context menu
		nCtrlIdx = RBNCntxtMenuInsertMenuItem(MenuId_LcLayersShortcut, "exlyrCntxtRenameLayer", GetResItemStr("MNU_ADVANCED_RENAME") & "...", "", 3)
	Else
		'**With versions of MapInfo Pro newer than v2100 context menu items have been given a static name
		nCtrlIdx = RBNCntxtMenuInsertMenuItemAfter(MenuId_LcLayersShortcut, "exlyrCntxtRenameLayer", GetResItemStr("MNU_ADVANCED_RENAME") & "...", "", "MenuItem_LcRenameToFriendlyName")
	End If
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_ADVANCED_RENAME"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_TAB_RENAMETABLE_16, MI_IMG_TAB_RENAMETABLE_32)
		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHRenameLayerAdvancedLC")
	End If

	'Get the specific Context menu
	rbnCntxtMenu = ICntxtMnusGetCntxtMnu(theContextMenus, MenuId_LcLayersShortcut)
	'*Get the controls collection of this context menu
	rbnControlCollection = GetICntxtMnuCtrls(rbnCntxtMenu)

	nNumControls = GetMICtrlCollCount(rbnControlCollection)
	For i = 1 To nNumControls
		rbnElement = GetMICtrlCollItemInt(rbnControlCollection, (i - 1))
		If RBNControlGetNameThs(rbnElement) In ("MenuItem_LcViewEntireLayer", "MenuItem_LcRenameToFriendlyName") Then
'			Call DEBUGPrint("Hiding Menu Item " & RBNControlGetNameThs(rbnElement))
			Call RBNControlSetVisibilityThs(rbnElement, FALSE)
		End If
	Next

	nCtrlIdx = RBNCntxtMenuInsertMenuItemAfter(MenuId_LcLayersShortcut, "exlyrCntxtDefaultView", GetResItemStr("MNU_SET_DEFAULT_VIEW_SINGLE_LAYER"), "", "exlyrCntxtRenameLayer")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_SET_DEFAULT_VIEW_SINGLE_LAYER"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, "", PATH_IMAGES & "DefaultView_24x24.png")
		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHSetDefaultViewSingleLayer")
	End If

	If DLGWHOAddItemToContextMenu(LYR_CTXT_MOVE_LAYER_TOP_BOTTOM) Then
		nCtrlIdx = RBNCntxtMenuInsertMenuItemAfter(MenuId_LcLayersShortcut, "exlyrCntxtMoveToBottom", GetResItemStr("MNU_LAYER_MOVE_TO_BOTTOM"), "", "exlyrCntxtRenameLayer")
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_LAYER_MOVE_TO_BOTTOM"), GetResItemStr("MNU_HLP_LAYER_MOVE_TO_BOTTOM_DISABLED"))
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, "", PATH_IMAGES & "ArrowDown_15x15.png")
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHMenuMoveLayerToBottomLC")
		End If
		nCtrlIdx = RBNCntxtMenuInsertMenuItemAfter(MenuId_LcLayersShortcut, "exlyrCntxtMoveToTop", GetResItemStr("MNU_LAYER_MOVE_TO_TOP"), "", "exlyrCntxtRenameLayer")
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_LAYER_MOVE_TO_TOP"), GetResItemStr("MNU_HLP_LAYER_MOVE_TO_TOP_DISABLED"))
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, "", PATH_IMAGES & "ArrowUp_15x15.png")
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHMenuMoveLayerToTopLC")
		End If
	End If

	If DLGWHOAddItemToContextMenu(LYR_CTXT_THEMES_QUICK) Then
		If SystemInfo(SYS_INFO_MIVERSION) < 2100 Then
			'**Adding a menu item as the fourth menu item on the Mapper Context menu
			nCtrlIdx = RBNCntxtMenuAddMenuItem(MenuId_LcLayersShortcut, "exlyrCntxtQuickThemeIndividual", GetResItemStr("MNU_QUICK_THEME_INDIVIDUAL"), "")
		Else
			'**With versions of MapInfo Pro newer than v2100 context menu items have been given a static name
			nCtrlIdx = RBNCntxtMenuInsertMenuItemAfter(MenuId_LcLayersShortcut, "exlyrCntxtQuickThemeIndividual", GetResItemStr("MNU_QUICK_THEME_INDIVIDUAL") & "...", "", "SampleDensity")
		End If
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_QUICK_THEME_INDIVIDUAL"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_ADDTHEME_16, MI_IMG_MAP_ADDTHEME_32)
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHMenuQuickThemeIndividualLC")
		End If

		nCtrlIdx = RBNCntxtMenuInsertMenuItemAfter(MenuId_LcLayersShortcut, "exlyrCntxtQuickThemeRanged", GetResItemStr("MNU_QUICK_THEME_RANGED") & "...", "", "exlyrCntxtQuickThemeIndividual")
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_QUICK_THEME_RANGED"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_ADDTHEME_16, MI_IMG_MAP_ADDTHEME_32)
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHMenuQuickThemeRangedLC")
		End If
	End If

	If DLGWHOAddItemToContextMenu(LYR_CTXT_THEME_SAVE_TO_TABLE) Then
		nCtrlIdx = RBNCntxtMenuInsertMenuItemAfter(MenuId_LcLayersShortcut, "exlyrCntxtThemeSaveToTable", GetResItemStr("MNU_THEME_SAVE_TO_TABLE"), "", "exlyrCntxtQuickThemeRanged")
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_THEME_SAVE_TO_TABLE"), GetResItemStr("MNU_HLP_ONE_LAYER_THEMATIC_DISABLED"))
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, PATH_IMAGES & "ThemeSave_16x16.png", PATH_IMAGES & "ThemeSave_32x32.png")
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHMenuSaveThemeStylesToTable")
		End If
	End If

	If DLGWHOAddItemToContextMenu(LYR_CTXT_APPLY_STYLES) Then
		If SystemInfo(SYS_INFO_MIVERSION) >= 2100 Then
			nCtrlIdx = RBNCntxtMenuInsertMenuItemBefore(MenuId_LcLayersShortcut, "exlyrCntxtToggleOverrideStyles", GetResItemStr("MNU_APPLY_STYLES"), "", "MenuItem_LcLayerProperties") ' MenuItem_LcLayerProperties or MenuItem_LcAddDisplayOverride
		Else
			nCtrlIdx = RBNCntxtMenuInsertMenuItem(MenuId_LcLayersShortcut, "exlyrCntxtToggleOverrideStyles", GetResItemStr("MNU_APPLY_STYLES"), "", 6)
		End If
		If nCtrlIdx > 0 Then
			Call RBNControlToggleIdx(nCtrlIdx, TRUE)
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_APPLY_STYLES"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_LYR_APPLYSTYLES_16, MI_IMG_LYR_APPLYSTYLES_32)
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCmdIDIdx(nCtrlIdx, 2528)	'Apply Styles
		End If
	End If

	If DLGWHOAddItemToContextMenu(LYR_CTXT_COPY_PASTE_LAYER_PROP) Then
		If SystemInfo(SYS_INFO_MIVERSION) >= 2100 Then
			nCtrlIdx = RBNCntxtMenuInsertMenuItemAfter(MenuId_LcLayersShortcut, "exlyrCntxtCopyProperties", GetResItemStr("MNU_COPY_LAYER_PROPERTIES"), "", "MenuItem_LcLayerTimeProperties")
		Else
			nCtrlIdx = RBNCntxtMenuAddMenuItem(MenuId_LcLayersShortcut, "exlyrCntxtCopyProperties", GetResItemStr("MNU_COPY_LAYER_PROPERTIES"), "")
		End If
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_COPY_LAYER_PROPERTIES"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_COPY_16, MI_IMG_MAP_COPY_32)
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHMenuCopyLayerSettingsLC")
		End If

		nCtrlIdx = RBNCntxtMenuInsertMenuItemAfter(MenuId_LcLayersShortcut, "exlyrCntxtPasteProperties", GetResItemStr("MNU_PASTE_LAYER_PROPERTIES"), "", "exlyrCntxtCopyProperties")
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_PASTE_LAYER_PROPERTIES"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_PASTE_16, MI_IMG_MAP_PASTE_32)
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHMenuPasteLayerSettingsLC")
		End If
	End If

	If SystemInfo(SYS_INFO_MIVERSION) >= 2100 Then
		nCtrlIdx = RBNCntxtMenuInsertMenuItemAfter(MenuId_LcLayersShortcut, "exlyrCntxtRefreshFilteredLayer", GetResItemStr("MNU_REFRESH_FILTERED__LAYER"), "", "MenuItem_LcZoomToTileServer")
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_REFRESH_FILTERED__LAYER"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_TAB_REFRESHCONNECTION_16, MI_IMG_TAB_REFRESHCONNECTION_32)
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MAPHMenuRefreshFilteredLayerLC")
		End If
	End If

	sTextEditorExe	= SYSFindTextEditor()
	If sTextEditorExe <> "" And DLGWHOAddItemToContextMenu(LYR_CTXT_SHOW_IN_TXT_EDITOR) Then
		sTextEditor 	= PathToFileName$(sTextEditorExe)
		sTextEditor 	= Left$(sTextEditor, Len(sTextEditor) - 4)

		Call TABHSetTextEditor(sTextEditorExe)

		'**Adding a menu item to the Layer Control Layer Context menu
		nCtrlIdx = RBNCntxtMenuAddMenuItem(MenuId_LcLayersShortcut, "lclCntxtOpenInTextEditor", GetResItemStr("MNU_OPEN_TABFILE_IN_TEXT_EDITOR") & " " & sTextEditor, "")
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_OPEN_TABFILE_IN_TEXT_EDITOR"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, PATH_IMAGES & "Notepad 16x16.png", "")
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "TABHOpenTabFileLC")
		End If
	End If

	'***************************************************************
	' T A B L E   L I S T   T A B L E S   C O N T E X T   M E N U
	'***************************************************************
	If SystemInfo(SYS_INFO_MIVERSION) < 2100 And DLGWHOAddItemToContextMenu(TAB_CTXT_SHOW_IN_WIN_EXPLORER) Then
		'**Adding a menu item to the Table List Context menu
		nCtrlIdx = RBNCntxtMenuAddMenuItem(MenuId_TableListTablesShortcut, "extabCntxLocateInExplorer", GetResItemStr("MNU_LOCATE_FILE_IN_EXPLORER"), "")
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_LOCATE_FILE_IN_EXPLORER"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, PATH_IMAGES & "Windows Explorer 16x16.png", "")
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "TABHLocateTabFileTL")
		End If
	End If

	If DLGWHOAddItemToContextMenu(TAB_CTXT_BROWSER_FLOATING) Then
		If SystemInfo(SYS_INFO_MIVERSION) < 2100 Then
			nCtrlIdx = RBNCntxtMenuInsertMenuItem(MenuId_TableListTablesShortcut, "extabCntxBrowseFloating", GetResItemStr("MNU_BROWSE_FLOATING_WIN"), "", 2)
		Else
			'**With versions of MapInfo Pro newer than v2100 context menu items have been given a static name
			nCtrlIdx = RBNCntxtMenuInsertMenuItemAfter(MenuId_TableListTablesShortcut, "extabCntxBrowseFloating", GetResItemStr("MNU_BROWSE_FLOATING_WIN"), "", "MenuItem_TlvBrowseTable")
		End If
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_BROWSER_FLOATING"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_LAY_NEWBROWSER_16, MI_IMG_LAY_NEWBROWSER_32)
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "TABHBrowserFloatingTL")
		End If
	End If

	sTextEditorExe	= SYSFindTextEditor()
	If sTextEditorExe <> "" And DLGWHOAddItemToContextMenu(TAB_CTXT_SHOW_IN_TXT_EDITOR) Then
		sTextEditor 	= PathToFileName$(sTextEditorExe)
		sTextEditor 	= Left$(sTextEditor, Len(sTextEditor) - 4)

		Call TABHSetTextEditor(sTextEditorExe)

		If SystemInfo(SYS_INFO_MIVERSION) < 2100 Then
			'**Adding a menu item to the Table List Context menu
			nCtrlIdx = RBNCntxtMenuAddMenuItem(MenuId_TableListTablesShortcut, "tlCntxtOpenInTextEditor", GetResItemStr("MNU_OPEN_TABFILE_IN_TEXT_EDITOR") & " " & sTextEditor, "")
		Else
			'**With versions of MapInfo Pro newer than v2100 context menu items have been given a static name
			nCtrlIdx = RBNCntxtMenuInsertMenuItemAfter(MenuId_TableListTablesShortcut, "tlCntxtOpenInTextEditor", GetResItemStr("MNU_OPEN_TABFILE_IN_TEXT_EDITOR") & " " & sTextEditor, "", "MenuItem_TlvOpenInFolder")
		End If
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_OPEN_TABFILE_IN_TEXT_EDITOR"), "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, PATH_IMAGES & "Notepad 16x16.png", "")
			Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "TABHOpenTabFileTL")
		End If
	End If

	'***************************************************************
	'**Adding a menu item to the Window List Context menu
'	nCtrlIdx = RBNCntxtMenuAddMenuItem(MenuId_WindowListShortcut, "wlCntxtModifyWindow", GetResItemStr("MNU_MODIFY_WINDOW"), "")
'	If nCtrlIdx > 0 Then
'		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_MODIFY_WINDOW"), "")
'		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, "", PATH_IMAGES & "ModifyWindow_32x32.png")
'		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
'		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "WINHModifyWindowWL")
'	End If

	'***************************************************************
	'A P P L I C A T I O N    C O N T E X T    M E N U S
	'***************************************************************
	nCtrlIdx	= RBNToolContextMenuAddMenuItem("showFunctionList", GetResItemStr("MNU_SHOW_MB_FUNCTION_LIST"), "")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("MNU_HLP_SHOW_MB_FUNCTION_LIST"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_APP_RUNMAPBASIC_16, MI_IMG_APP_RUNMAPBASIC_32)
		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "DLGExecFunctions")
	End If

	nCtrlIdx	= RBNToolContextMenuAddMenuItem("windowHelperOptions", GetResItemStr("MNU_OPTIONS") & "...", "")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), GetResItemStr("TTIP_OPTIONS"), "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_APP_OPTSYSTEMSETTINGS_16, "")
		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUOptions")
	End If

	'***************************************************************
	'S T A T U S B A R
	'***************************************************************
'	nCtrlIdx = RBNStatusbarAddControl("txtSelectionSize", GetResItemStrReplace("STR_SELECTED_RECORDS_X", FormatNumber$(SelectionInfo(SEL_INFO_NROWS))), ControlType_TextBlock)
	nCtrlIdx = RBNStatusbarInsertControlBefore("txtSelectionSize", GetResItemStrReplace("STR_SELECTED_RECORDS_X", "0"), ControlType_TextBlock, "StSelected")

	Call SELINFOSetSelInfoNumRowsControlIndex(nCtrlIdx)
	Call SELINFOSelChangedHandler
	Call MENURefreshLayoutControls
	Call MENURefreshLayerListControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUBuildRibbonInterface")
	Call ERRShow()

End Sub

'****************************************
'**   Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'**   Ending MapBasic application
'****************************************
Sub EndProgram

OnError GoTo ErrorOccured

	End Program
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "EndProgram")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub Endhandler

Dim i, nNumControls, nContextMenuID as integer,
	rbnElement, rbnCntxtMenu, rbnControlCollection As This

OnError GoTo ErrorOccured

	Call MENUWriteIniFile
'	Call WHDEndHandler
	Call BMHELPWriteConfigFile

	'Get the specific Context menu
	rbnCntxtMenu = ICntxtMnusGetCntxtMnu(theContextMenus, MenuId_LcMapsShortcut)
	'*Get the controls collection of this context menu
	rbnControlCollection = GetICntxtMnuCtrls(rbnCntxtMenu)

	nNumControls = GetMICtrlCollCount(rbnControlCollection)
	For i = 1 To nNumControls
		rbnElement = GetMICtrlCollItemInt(rbnControlCollection, (i - 1))
		If RBNControlGetNameThs(rbnElement) In ("MenuItem_ViewEntireMap") Then
			Call RBNControlSetVisibilityThs(rbnElement, FALSE)
			Exit For
		End If
	Next


	'Get the specific Context menu
	rbnCntxtMenu = ICntxtMnusGetCntxtMnu(theContextMenus, MenuId_LcLayersShortcut)
	'*Get the controls collection of this context menu
	rbnControlCollection = GetICntxtMnuCtrls(rbnCntxtMenu)

	nNumControls = GetMICtrlCollCount(rbnControlCollection)
	For i = 1 To nNumControls
		rbnElement = GetMICtrlCollItemInt(rbnControlCollection, (i - 1))
		If RBNControlGetNameThs(rbnElement) In ("MenuItem_LcViewEntireLayer", "MenuItem_LcRenameToFriendlyName") Then
'			Call DEBUGPrint("Showing Menu Item " & RBNControlGetNameThs(rbnElement))
			Call RBNControlSetVisibilityThs(rbnElement, TRUE)
		End If
	Next

	If SystemInfo(SYS_INFO_MAPINFO_INTERFACE) = MIINTERFACE_RIBBON Then
		Call RBNEndHandler
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "Endhandler")
	If DEBUGIsEnabled() Then
		Call ERRPrint()
	End If

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub WinClosedHandler

Dim	nWID As Integer

OnError GoTo ErrorOccured

	Set Event Processing Off
	Set Handler WinClosedHandler Off

	nWID = CommandInfo(CMD_INFO_WIN)
	Call WINHWinClosedHandler(nWID)
	Call MENURefreshLayoutControls
	Call MENURefreshLayerListControls
	'Call WHDWinClosedHandler(nWID)

	Set Handler WinClosedHandler On
	Set Event Processing On

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "WinClosedHandler")
	If DEBUGIsEnabled() Then
		Call ERRPrint()
	End If

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub WinFocusChangedHandler

Dim	nWID As Integer

OnError GoTo ErrorOccured

	Set Event Processing Off
	Set Handler WinFocusChangedHandler Off

	nWID = CommandInfo(CMD_INFO_WIN)
	Call WINHWinFocusChangedHandler(nWID)
'	Call WHDWinFocusChangedHandler(nWID)
	Call MENURefreshLayoutControls
	Call MENURefreshLayerListControls

	Set Handler WinFocusChangedHandler On
	Set Event Processing On

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "WinFocusChangedHandler")
	If DEBUGIsEnabled() Then
		Call ERRPrint()
	End If

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'
'**********************************************************************************************''
Sub WinChangedHandler

Dim	nWID As Integer

OnError GoTo ErrorOccured

	Set Event Processing Off
	Set Handler WinFocusChangedHandler Off

	nWID = CommandInfo(CMD_INFO_WIN)
	Call WINHWinChangedHandler(nWID)
'	Call WHDWinChangedHandler(nWID)

'	If WindowInfo(nWID, WIN_INFO_TYPE) = WIN_MAPPER Then
'		Call MAPCacheMapExtent(nWID)
'	End If

	Set Handler WinFocusChangedHandler On
	Set Event Processing On

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "WinChangedHandler")
	If DEBUGIsEnabled() Then
		Call ERRPrint()
	End If

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub SelChangedHandler

OnError GoTo ErrorOccured

	Call SELINFOSelChangedHandler
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "SelChangedHandler")
	If DEBUGIsEnabled() Then
		Call ERRPrint()
	End If

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENULayerSelectionChanged(ByVal args As This)

OnError GoTo ErrorOccured

	Call MENURefreshLayerListControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENULayerSelectionChanged")
	If DEBUGIsEnabled() Then
		Call ERRPrint()
	End If

End Sub

'**********************************************************************************************''
'Created by Peter Horsbï¿½ll Mï¿½ller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENULayoutSelectionChanged(ByVal args As This)

OnError GoTo ErrorOccured

	Call MENURefreshLayoutControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENULayoutSelectionChanged")
	If DEBUGIsEnabled() Then
		Call ERRPrint()
	End If

End Sub

'**********************************************************************************************''
'Created by Peter Horsbï¿½ll Mï¿½ller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENURefreshLayoutControls

Dim	nWID As Integer

OnError GoTo ErrorOccured

	nWID = FrontWindow()

	Alter Menu Item WINHLayoutClearSelection 	Disable
	Alter Menu Item WINHLayoutEditText 		Disable

	If nWID > 0 Then
		If WindowInfo(nWID, WIN_INFO_TYPE) = WIN_LAYOUT_DESIGNER Then
			If LAYOUTNumSelectedFrames(nWID) > 0 Then
				Alter Menu Item WINHLayoutClearSelection 	Enable
				Alter Menu Item WINHLayoutEditText		 	Enable
			Else
'				Print "Disable WINHLayoutClearSelection - No frames selected"
			End If
		Else
			'**
'			Print "Disable WINHLayoutClearSelection - not a layout window"
		End If
	Else
		'**
'		Print "Disable WINHLayoutClearSelection - no windows open"
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENURefreshLayoutControls")
	If DEBUGIsEnabled() Then
		Call ERRPrint()
	End If

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENURefreshLayerListControls

Dim	nMID, nLayerID, nNumLayersSelected As Integer

OnError GoTo ErrorOccured

	nNumLayersSelected = LayerControlInfo(LC_INFO_SEL_COUNT)

	Do Case nNumLayersSelected
		Case 0
			'**No item selected which will mean that the context menu can't be shown
			Alter Menu Item MAPHMenuSaveThemeStylesToTable 	Disable
			Alter Menu Item MAPHMenuMoveLayerToTopLC	 	Disable
			Alter Menu Item MAPHMenuMoveLayerToBottomLC	 	Disable
			Alter Menu Item TABHCloseTableLC 				Disable	'exlyrCntxtCntxtCloseTable
			Alter Menu Item MAPHMenuPasteLayerSettingsLC 	Disable	'exlyrCntxtPasteProperties

		Case 1
			nMID		= LayerControlSelectionInfo(1, LC_SEL_INFO_MAPWIN_ID)
			nLayerID	= LayerControlSelectionInfo(1, LC_SEL_INFO_LAYER_ID)
			If nLayerID <= 0 Then
				'**No layer has been selected, so the 'Layer List Layer Context Menu' isn't shown
				Exit Sub
			End If

			Alter Menu Item TABHLocateTabFileLC 			Enable	'exlyrCntxtLocateInExplore
			Alter Menu Item TABHOpenTabFileLC	 			Enable	'lclCntxtOpenInTextEditor
			Alter Menu Item WINHSetDefaultViewSingleLayer 	Enable	'exlyrCntxtDefaultView
			Alter Menu Item TABHCloseTableLC 				Enable	'exlyrCntxtCntxtCloseTable
			Alter Menu Item MAPHRenameLayerAdvancedLC 		Enable	'exlyrCntxtRenameLayer
			Alter Menu Item MAPHMenuQuickThemeIndividualLC 	Enable	'exlyrCntxtQuickThemeIndividual
			Alter Menu Item MAPHMenuQuickThemeRangedLC 		Enable	'exlyrCntxtQuickThemeRanged
			Alter Menu Item MAPHMenuCopyLayerSettingsLC 		Enable	'exlyrCntxtCopyProperties
			Alter Menu Item MAPHMenuPasteLayerSettingsLC 	Enable	'exlyrCntxtPasteProperties
			Alter Menu Item MAPHMenuRefreshFilteredLayerLC 	Enable	'exlyrCntxtRefreshFilteredLayer
			Alter Menu Item MAPHMenuMoveLayerToTopLC	 	Enable
			Alter Menu Item MAPHMenuMoveLayerToBottomLC	 	Enable
			Alter Menu Item MAPHMenuSaveThemeStylesToTable 	Enable

			If nLayerID = 1 Then
				Alter Menu Item MAPHMenuMoveLayerToTopLC	 	Disable
			ElseIf nLayerID = MapperInfo(nMID, MAPPER_INFO_LAYERS) Then
				Alter Menu Item MAPHMenuMoveLayerToBottomLC	 	Disable
			End If

			Do Case LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE)
				Case LAYER_INFO_TYPE_NORMAL
					'Call RBNGroupEnableControls("", "", exlyrCntxtCntxtCloseTable, TRUE)
					If TableInfo(LayerInfo(nMID, nLayerID, LAYER_INFO_NAME), TAB_INFO_TEMP) Then
						Alter Menu Item TABHLocateTabFileLC 			Disable	'exlyrCntxtLocateInExplorer
						Alter Menu Item TABHOpenTabFileLC	 			Disable	'lclCntxtOpenInTextEditor
						Alter Menu Item WINHSetDefaultViewSingleLayer 	Disable	'exlyrCntxtDefaultView
					End If
					Alter Menu Item MAPHMenuSaveThemeStylesToTable 	Disable

				Case LAYER_INFO_TYPE_IMAGE, LAYER_INFO_TYPE_GRID, LAYER_INFO_TYPE_WMS, LAYER_INFO_TYPE_TILESERVER
					Alter Menu Item WINHSetDefaultViewSingleLayer 	Disable	'exlyrCntxtDefaultView
					Alter Menu Item MAPHMenuQuickThemeIndividualLC 	Disable	'exlyrCntxtQuickThemeIndividual
					Alter Menu Item MAPHMenuQuickThemeRangedLC 		Disable	'exlyrCntxtQuickThemeRanged
					Alter Menu Item MAPHMenuRefreshFilteredLayerLC 	Disable	'exlyrCntxtRefreshFilteredLayer
					Alter Menu Item MAPHMenuSaveThemeStylesToTable 	Disable

				Case LAYER_INFO_TYPE_THEMATIC
					Alter Menu Item TABHCloseTableLC 				Disable	'exlyrCntxtCntxtCloseTable
					Alter Menu Item TABHLocateTabFileLC 			Disable	'exlyrCntxtLocateInExplorer
					Alter Menu Item TABHOpenTabFileLC	 			Disable	'lclCntxtOpenInTextEditor
					Alter Menu Item WINHSetDefaultViewSingleLayer 	Disable	'exlyrCntxtDefaultView
					Alter Menu Item MAPHMenuQuickThemeIndividualLC 	Disable	'exlyrCntxtQuickThemeIndividual
					Alter Menu Item MAPHMenuQuickThemeRangedLC 		Disable	'exlyrCntxtQuickThemeRanged
'					Alter Menu Item MAPHMenuCopyLayerSettingsLC 		Disable	'exlyrCntxtCopyProperties
'					Alter Menu Item MAPHMenuPasteLayerSettingsLC 	Disable	'exlyrCntxtPasteProperties
					Alter Menu Item MAPHMenuRefreshFilteredLayerLC 	Disable	'exlyrCntxtRefreshFilteredLayer
					Alter Menu Item MAPHMenuMoveLayerToTopLC	 	Disable
					Alter Menu Item MAPHMenuMoveLayerToBottomLC	 	Disable

				Case LAYER_INFO_TYPE_COSMETIC, LAYER_INFO_TYPE_GRIDLINE
					Alter Menu Item TABHCloseTableLC 				Disable	'exlyrCntxtCntxtCloseTable
					Alter Menu Item TABHLocateTabFileLC 			Disable	'exlyrCntxtLocateInExplorer
					Alter Menu Item TABHOpenTabFileLC	 			Disable	'lclCntxtOpenInTextEditor
					Alter Menu Item MAPHRenameLayerAdvancedLC 		Disable	'exlyrCntxtRenameLayer
					Alter Menu Item WINHSetDefaultViewSingleLayer 	Disable	'exlyrCntxtDefaultView
					Alter Menu Item MAPHMenuQuickThemeIndividualLC 	Disable	'exlyrCntxtQuickThemeIndividual
					Alter Menu Item MAPHMenuQuickThemeRangedLC 		Disable	'exlyrCntxtQuickThemeRanged
					Alter Menu Item MAPHMenuCopyLayerSettingsLC 		Disable	'exlyrCntxtCopyProperties
					Alter Menu Item MAPHMenuPasteLayerSettingsLC 	Disable	'exlyrCntxtPasteProperties
					Alter Menu Item MAPHMenuRefreshFilteredLayerLC 	Disable	'exlyrCntxtRefreshFilteredLayer
					Alter Menu Item MAPHMenuMoveLayerToTopLC	 	Disable
					Alter Menu Item MAPHMenuMoveLayerToBottomLC	 	Disable
					Alter Menu Item MAPHMenuSaveThemeStylesToTable 	Disable
			End Case

		Case Else
'			Alter Menu Item TABHCloseTableLC 				Disable	'exlyrCntxtCntxtCloseTable
			Alter Menu Item TABHLocateTabFileLC 			Disable	'exlyrCntxtLocateInExplorer
			Alter Menu Item TABHOpenTabFileLC	 			Disable	'lclCntxtOpenInTextEditor
			Alter Menu Item MAPHRenameLayerAdvancedLC 		Disable	'exlyrCntxtRenameLayer
			Alter Menu Item WINHSetDefaultViewSingleLayer 	Disable	'exlyrCntxtDefaultView
			Alter Menu Item MAPHMenuQuickThemeIndividualLC 	Disable	'exlyrCntxtQuickThemeIndividual
			Alter Menu Item MAPHMenuQuickThemeRangedLC 		Disable	'exlyrCntxtQuickThemeRanged
			Alter Menu Item MAPHMenuCopyLayerSettingsLC 		Disable	'exlyrCntxtCopyProperties
'			Alter Menu Item MAPHMenuPasteLayerSettingsLC 	Disable	'exlyrCntxtPasteProperties
			Alter Menu Item MAPHMenuRefreshFilteredLayerLC 	Disable	'exlyrCntxtRefreshFilteredLayer
'			Alter Menu Item MAPHMenuMoveLayerToTopLC	 	Disable
'			Alter Menu Item MAPHMenuMoveLayerToBottomLC	 	Disable
			Alter Menu Item MAPHMenuSaveThemeStylesToTable 	Disable
			Alter Menu Item MAPHMenuMoveLayerToTopLC	 	Enable
			Alter Menu Item MAPHMenuMoveLayerToBottomLC	 	Enable
			Alter Menu Item TABHCloseTableLC 				Enable	'exlyrCntxtCntxtCloseTable
			Alter Menu Item MAPHMenuPasteLayerSettingsLC 	Enable	'exlyrCntxtPasteProperties

	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENURefreshLayerListControls")
	If DEBUGIsEnabled() Then
		Call ERRPrint()
	End If

End Sub



'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub MENUInitializeMenuItems

OnError GoTo ErrorOccured

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUInitializeMenuItems")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub MENUReadIniFile

Dim	sFile, sState, sOption, sFontName, sFont As String,
	fntCurrent As Font,
	nFontStyle, nFontSize, nFontFColor, nFontBColor, nMenuItem As Integer

OnError GoTo ErrorOccured

	sFile 	= ApplicationDirectory$() & PathToFileName$(FILE_INI)

	sState	= CONFIGReadKey(sFile, "MAPMINITOOLBAR", "ADDTOOL_INFO")
	Call DLGWHOSetAddInfoToolToMTB(sState <> "0")
	sState	= CONFIGReadKey(sFile, "MAPMINITOOLBAR", "ADDTOOL_RULER")
	Call DLGWHOSetAddRulerToolToMTB(sState <> "0")
	sState	= CONFIGReadKey(sFile, "BROWSERFILTER", "IGNORE_TOPLEFTCELL")
	Call TABHSetIgnoreTopLeftCell(sState <> "0")

	sOption 	= "ZOOM_TYPE_STANDARD"
	sState	= CONFIGReadKey(sFile, "ZOOMENTIREMAP", sOption)
	Call DLGWHOSetViewEntireMapOption(sOption, IIf(sState = "0", FALSE, TRUE))
	sOption 	= "ZOOM_NORMAL_VECTOR_LAYERS"
	sState	= CONFIGReadKey(sFile, "ZOOMENTIREMAP", sOption)
	Call DLGWHOSetViewEntireMapOption(sOption, IIf(sState = "0", FALSE, TRUE))
	sOption 	= "ZOOM_LOCAL_RASTER_LAYERS"
	sState	= CONFIGReadKey(sFile, "ZOOMENTIREMAP", sOption)
	Call DLGWHOSetViewEntireMapOption(sOption, IIf(sState = "0", FALSE, TRUE))
	sOption 	= "ZOOM_LOCAL_GRID_LAYERS"
	sState	= CONFIGReadKey(sFile, "ZOOMENTIREMAP", sOption)
	Call DLGWHOSetViewEntireMapOption(sOption, IIf(sState = "0", FALSE, TRUE))
	sOption 	= "ZOOM_WMS_LAYERS"
	sState	= CONFIGReadKey(sFile, "ZOOMENTIREMAP", sOption)
	Call DLGWHOSetViewEntireMapOption(sOption, IIf(sState = "1", TRUE, FALSE))
	sOption 	= "ZOOM_TILESERVER_LAYERS"
	sState	= CONFIGReadKey(sFile, "ZOOMENTIREMAP", sOption)
	Call DLGWHOSetViewEntireMapOption(sOption, IIf(sState = "1", TRUE, FALSE))
	sOption 	= "ZOOM_ONLY_VISIBLE"
	sState	= CONFIGReadKey(sFile, "ZOOMENTIREMAP", sOption)
	Call DLGWHOSetViewEntireMapOption(sOption, IIf(sState = "0", FALSE, TRUE))

	For nMenuItem = 1 To NUM_CTXT_MENU_ITEMS
		sState	= CONFIGReadKey(sFile, "CONTEXT_MENUS", "ADD_MENUITEM_" & nMenuItem)
		Call DLGWHOSetAddItemToContextMenu(nMenuItem, IIf(sState <> "0", TRUE, FALSE))
	Next

	fntCurrent 	= CurrentFont()
	sFontName		= StyleAttr(fntCurrent, FONT_NAME)
	nFontStyle	= 1 + 256
	nFontSize		= 18	'StyleAttr(fntCurrent, FONT_POINTSIZE)
	nFontFColor	= BLACK	'StyleAttr(fntCurrent, FONT_FORECOLOR)
	nFontBColor	= WHITE	'StyleAttr(fntCurrent, FONT_BACKCOLOR)
	fntCurrent	= MakeFont(sFontName, nFontStyle, nFontSize, nFontFColor, nFontBColor)
	Call DLGWHOSetSmartTextFont(fntCurrent)

	If FileExists(FILE_INI) Then
'		msLanguage	= CONFIGReadKey(msIniFile, "SETTINGS", "LANGUAGE")
'		Call DEBUGPrint("Found '" & msLanguage & "' in " & msIniFile)

		sState	= CONFIGReadKey(FILE_INI, "MAPMINITOOLBAR", "ADDTOOL_INFO")
		Call DLGWHOSetAddInfoToolToMTB(sState <> "0")
		sState	= CONFIGReadKey(FILE_INI, "MAPMINITOOLBAR", "ADDTOOL_RULER")
		Call DLGWHOSetAddRulerToolToMTB(sState <> "0")

		For nMenuItem = 1 To NUM_CTXT_MENU_ITEMS
			sState	= CONFIGReadKey(FILE_INI, "CONTEXT_MENUS", "ADD_MENUITEM_" & nMenuItem)
			Call DLGWHOSetAddItemToContextMenu(nMenuItem, sState <> "0")
		Next

		sState	= CONFIGReadKey(FILE_INI, "BROWSERFILTER", "IGNORE_TOPLEFTCELL")
		Call TABHSetIgnoreTopLeftCell(sState <> "0")

		sFont	= CONFIGReadKey(FILE_INI, "SMARTEXT", "FONT")
		If sFont <> "" Then
			fntCurrent	= STLText2Font(sFont)
			Call DLGWHOSetSmartTextFont(fntCurrent)
		End If

		sOption 	= "ZOOM_TYPE_STANDARD"
		sState	= CONFIGReadKey(FILE_INI, "ZOOMENTIREMAP", sOption)
		Call DLGWHOSetViewEntireMapOption(sOption, IIf(sState = "0", FALSE, TRUE))
		sOption 	= "ZOOM_NORMAL_VECTOR_LAYERS"
		sState	= CONFIGReadKey(FILE_INI, "ZOOMENTIREMAP", sOption)
		Call DLGWHOSetViewEntireMapOption(sOption, IIf(sState = "0", FALSE, TRUE))
		sOption 	= "ZOOM_LOCAL_RASTER_LAYERS"
		sState	= CONFIGReadKey(FILE_INI, "ZOOMENTIREMAP", sOption)
		Call DLGWHOSetViewEntireMapOption(sOption, IIf(sState = "0", FALSE, TRUE))
		sOption 	= "ZOOM_LOCAL_GRID_LAYERS"
		sState	= CONFIGReadKey(FILE_INI, "ZOOMENTIREMAP", sOption)
		Call DLGWHOSetViewEntireMapOption(sOption, IIf(sState = "0", FALSE, TRUE))
		sOption 	= "ZOOM_WMS_LAYERS"
		sState	= CONFIGReadKey(FILE_INI, "ZOOMENTIREMAP", sOption)
		Call DLGWHOSetViewEntireMapOption(sOption, IIf(sState = "1", TRUE, FALSE))
		sOption 	= "ZOOM_TILESERVER_LAYERS"
		sState	= CONFIGReadKey(FILE_INI, "ZOOMENTIREMAP", sOption)
		Call DLGWHOSetViewEntireMapOption(sOption, IIf(sState = "1", TRUE, FALSE))
		sOption 	= "ZOOM_ONLY_VISIBLE"
		sState	= CONFIGReadKey(FILE_INI, "ZOOMENTIREMAP", sOption)
		Call DLGWHOSetViewEntireMapOption(sOption, IIf(sState = "0", FALSE, TRUE))
	Else
		Call DEBUGPrint("Config File not Found " & FILE_INI)
	End If

	Call SELINFOReadConfigFile
	Call WINHReadConfigFile

'	Call WINPReadIniFile(FILE_INI)
'	Call BWINReadIniFile(FILE_INI)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUReadIniFile")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'
'**********************************************************************************************''
Sub MENUWriteIniFile

Dim	nMenuItem As Integer,
	sOption As String

OnError GoTo ErrorOccured

	Call CONFIGWriteKey(FILE_INI, "MAPMINITOOLBAR", "ADDTOOL_INFO", Int(DLGWHOGetAddInfoToolToMTB()))
	Call CONFIGWriteKey(FILE_INI, "MAPMINITOOLBAR", "ADDTOOL_RULER", Int(DLGWHOGetAddRulerToolToMTB()))

	For nMenuItem = 1 To NUM_CTXT_MENU_ITEMS
		Call CONFIGWriteKey(FILE_INI, "CONTEXT_MENUS", "ADD_MENUITEM_" & nMenuItem, Int(DLGWHOAddItemToContextMenu(nMenuItem)))
	Next

	Call CONFIGWriteKey(FILE_INI, "BROWSERFILTER", "IGNORE_TOPLEFTCELL", Int(TABHGetIgnoreTopLeftCell()))

	Call CONFIGWriteKey(FILE_INI, "SMARTEXT", "FONT", STLFont2Text(DLGWHOGetSmartTextFont()))

	sOption 	= "ZOOM_TYPE_STANDARD"
	Call CONFIGWriteKey(FILE_INI, "ZOOMENTIREMAP", sOption, Int(DLGWHOGetViewEntireMapOption(sOption)))
	sOption 	= "ZOOM_NORMAL_VECTOR_LAYERS"
	Call CONFIGWriteKey(FILE_INI, "ZOOMENTIREMAP", sOption, Int(DLGWHOGetViewEntireMapOption(sOption)))
	sOption 	= "ZOOM_LOCAL_RASTER_LAYERS"
	Call CONFIGWriteKey(FILE_INI, "ZOOMENTIREMAP", sOption, Int(DLGWHOGetViewEntireMapOption(sOption)))
	sOption 	= "ZOOM_LOCAL_GRID_LAYERS"
	Call CONFIGWriteKey(FILE_INI, "ZOOMENTIREMAP", sOption, Int(DLGWHOGetViewEntireMapOption(sOption)))
	sOption 	= "ZOOM_WMS_LAYERS"
	Call CONFIGWriteKey(FILE_INI, "ZOOMENTIREMAP", sOption, Int(DLGWHOGetViewEntireMapOption(sOption)))
	sOption 	= "ZOOM_TILESERVER_LAYERS"
	Call CONFIGWriteKey(FILE_INI, "ZOOMENTIREMAP", sOption, Int(DLGWHOGetViewEntireMapOption(sOption)))
	sOption 	= "ZOOM_ONLY_VISIBLE"
	Call CONFIGWriteKey(FILE_INI, "ZOOMENTIREMAP", sOption, Int(DLGWHOGetViewEntireMapOption(sOption)))

	Call SELINFOWriteConfigFile
	Call WINHWriteConfigFile

'	Call WINPWriteIniFile(FILE_INI)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUWriteIniFile")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENUOptions

OnError GoTo ErrorOccured

	Call DLGWHOSetShowInfoOnDeselect(SELINFOGetShowInfoOnDeselect())

	If DLGWHOWindowHelperOptions() Then
		Call SELINFOSetShowInfoOnDeselect(DLGWHOGetShowInfoOnDeselect())
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUOptions")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENUMapDrawHandler(ByVal arg as This)

Dim	dtEnd as DateTime,
	fElapsedTime as Float

OnError GoTo ErrorOccured

	Print "MENUMapDrawHandler: " & GetMapDrawEventArgsDrawEventType(arg)
	Do Case GetMapDrawEventArgsDrawEventType(arg)
		Case 0	'DrawStarted
			dtStart = CurDateTime()
			Print "Begin Drawing" & WindowInfo(CommandInfo(CMD_INFO_WIN), WIN_INFO_NAME)
		Case 1	'DrawEnded
			dtEnd		= CurDateTime()
			fElapsedTime	= ((dtEnd - dtStart) * 100000)
			Print "End Drawing: " & WindowInfo(CommandInfo(CMD_INFO_WIN), WIN_INFO_NAME) & ": " & FormatNumber$(fElapsedTime) & " secs"
	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENURefreshLayerListControls")
	If DEBUGIsEnabled() Then
		Call ERRPrint()
	End If

End Sub 'WinEndDrawHandler