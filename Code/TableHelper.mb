'*******************************************************************************
'** 	Created By Peter Horsbøll Møller, Pitney Bowes Software
'** 	Program:	WindowHelper
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Icons.def"
Include "Menu.def"
'**default constants...
Include "Library\Defaults.def"

'-------------------------------------
Include "Library\ARRAYLib.def"
Include "Library\COLUMNLib.def"
Include "Library\DEBUGLib.def"
Include "Library\ERRORLib.def"
Include "Library\RIBBONLib.def"
Include "Library\TABLELib.def"

Include "TableHelper.def"
Include "WindowHelper.Assembly.def"
'Include "Resources.def"

Dim	msTextEditor As String,
	mbIgnoreTopLeftCell As Logical

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub TABHLocateTabFileTL

Dim	sTab, sFile As String

OnError GoTo ErrorOccured

	If TableListInfo(TL_INFO_SEL_COUNT) <> 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_TABLE_IN_TABLELIST")		'"Please select one table in the TableList window!"
		Exit Sub
	End If

'	Define TAB_TYPE_BASE                            1
'	Define TAB_TYPE_RESULT                          2	- is ignored
'	Define TAB_TYPE_VIEW                            3	- is ignored
'	Define TAB_TYPE_IMAGE                           4
'	Define TAB_TYPE_LINKED                          5
'	Define TAB_TYPE_WMS                             6
'	Define TAB_TYPE_WFS                             7
'	Define TAB_TYPE_FME                             8
'	Define TAB_TYPE_TILESERVER                      9

	sTab = TableListSelectionInfo (1, TL_SEL_INFO_NAME)
	Do Case TableInfo(sTab, TAB_INFO_TYPE)
		Case TAB_TYPE_BASE, TAB_TYPE_FME, TAB_TYPE_LINKED, TAB_TYPE_WFS, TAB_TYPE_WMS, TAB_TYPE_TILESERVER
			sFile	= TableInfo(sTab, TAB_INFO_TABFILE)
		Case TAB_TYPE_IMAGE
			If Ask(GetResItemStr("ASK_LOCATE_TAB_FILE_OR_RASTER_FILE"), GetResItemStr("STR_TAB_FILE"), GetResItemStr("STR_RASTER_FILE")) Then	'Ask("Do you want to find the tab file or the raster file?", "Table", "Raster") Then
				sFile	= TableInfo(sTab, TAB_INFO_TABFILE)
			Else
				sFile	= RasterTableInfo(sTab, RASTER_TAB_INFO_IMAGE_NAME)
			End If
		Case Else
			Note GetResItemStr("ERR_SELECT_NON_TEMPORAL_LAYER_IN_LAYER_CONTROL")		' "Please select a non temporal table!"
			Exit Sub
	End Case

	Run Program "Explorer.exe /select," & sFile

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHLocateTabFileTL")
	Call ERRShow()

End Sub 'TABHLocateTabFileTL

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub TABHLocateTabFileLC

Dim	nMID, nLayerID As Integer,
	sTab, sFile As String

OnError GoTo ErrorOccured

	If LayerControlInfo(LC_INFO_SEL_COUNT) <> 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_CONTROL")		'"Please select one layer in the Layer Control!"
		Exit Sub
	End If

	If LayerControlSelectionInfo (1, LC_SEL_INFO_TYPE) <> LC_SEL_INFO_TYPE_LAYER Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_CONTROL")		'"Please select one layer in the Layer Control!"
		Exit Sub
	End If

	nMID		= LayerControlSelectionInfo(1, LC_SEL_INFO_MAPWIN_ID)
	nLayerID	= LayerControlSelectionInfo(1, LC_SEL_INFO_LAYER_ID)
	sTab 	= LayerInfo(nMID, nLayerID, LAYER_INFO_NAME)

'	Define LAYER_INFO_TYPE_NORMAL                   0
'	Define LAYER_INFO_TYPE_COSMETIC                 1	- is ignored
'	Define LAYER_INFO_TYPE_IMAGE                    2
'	Define LAYER_INFO_TYPE_THEMATIC                 3	- is ignored
'	Define LAYER_INFO_TYPE_GRID                     4
'	Define LAYER_INFO_TYPE_WMS                      5
'	Define LAYER_INFO_TYPE_TILESERVER               6
'	Define LAYER_INFO_TYPE_GRIDLINE                 7	- is ignored

	Do Case LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE)
		Case LAYER_INFO_TYPE_NORMAL, LAYER_INFO_TYPE_WMS, LAYER_INFO_TYPE_TILESERVER
			sFile	= TableInfo(sTab, TAB_INFO_TABFILE)
		Case LAYER_INFO_TYPE_GRID
			If Ask(GetResItemStr("ASK_LOCATE_TAB_FILE_OR_GRID_FILE"), GetResItemStr("STR_TAB_FILE"), GetResItemStr("STR_GRID_FILE")) Then	'Ask("Do you want to find the tab file or the grid file?", "Table", "Grid") Then
				sFile	= TableInfo(sTab, TAB_INFO_TABFILE)
			Else
				sFile = RasterTableInfo(sTab, RASTER_TAB_INFO_IMAGE_NAME)
			End If
		Case LAYER_INFO_TYPE_IMAGE
			If Ask(GetResItemStr("ASK_LOCATE_TAB_FILE_OR_RASTER_FILE"), GetResItemStr("STR_TAB_FILE"), GetResItemStr("STR_RASTER_FILE")) Then	'Ask("Do you want to find the tab file or the raster file?", "Table", "Raster") Then
				sFile	= TableInfo(sTab, TAB_INFO_TABFILE)
			Else
				sFile = RasterTableInfo(sTab, RASTER_TAB_INFO_IMAGE_NAME)
			End If
		Case Else
			Note GetResItemStr("ERR_SELECT_NORMAL_OR_RASTER_OR_GRID_LAYER_IN_LAYER_CONTROL")		' "Please select a normal or raster/grid layer!"
			Exit Sub
	End Case

	Run Program "Explorer.exe /select," & sFile

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHLocateTabFileLC")
	Call ERRShow()

End Sub 'TABHLocateTabFileLC

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub TABHOpenTabFileTL

Dim	sTab, sFile As String

OnError GoTo ErrorOccured

	If TableListInfo(TL_INFO_SEL_COUNT) <> 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_TABLE_IN_TABLELIST")		'"Please select one table in the TableList window!"
		Exit Sub
	End If

	sTab		= TableListSelectionInfo (1, TL_SEL_INFO_NAME)
	sFile	= TableInfo(sTab, TAB_INFO_TABFILE)

	If sFile <> "" Then
		Print "Run Program " & msTextEditor + Chr$(32) + sFile
		Run Program msTextEditor + Chr$(32) + sFile
	Else
		Note GetResItemStr("ERR_SELECT_NON_TEMPORAL_LAYER_IN_LAYER_CONTROL")		' "Please select a non temporal table!"
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHOpenTabFileTL")
	Call ERRShow()

End Sub 'TABHOpenTabFileTL

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub TABHOpenTabFileLC

Dim	nMID, nLayerID As Integer,
	sTab, sFile As String

OnError GoTo ErrorOccured

	If LayerControlInfo(LC_INFO_SEL_COUNT) <> 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_CONTROL")		'"Please select one layer in the Layer Control!"
		Exit Sub
	End If

	If LayerControlSelectionInfo (1, LC_SEL_INFO_TYPE) <> LC_SEL_INFO_TYPE_LAYER Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_CONTROL")		'"Please select one layer in the Layer Control!"
		Exit Sub
	End If

	nMID		= LayerControlSelectionInfo(1, LC_SEL_INFO_MAPWIN_ID)
	nLayerID	= LayerControlSelectionInfo(1, LC_SEL_INFO_LAYER_ID)
	sTab 	= LayerInfo(nMID, nLayerID, LAYER_INFO_NAME)
	sFile	= TableInfo(sTab, TAB_INFO_TABFILE)

	If sFile <> "" Then
		Call DEBUGPrint("Run Program " & msTextEditor + Chr$(32) + sFile)
		Run Program msTextEditor & Chr$(32) & sFile
	Else
		Note GetResItemStr("ERR_SELECT_NON_TEMPORAL_LAYER_IN_LAYER_CONTROL")		' "Please select a non temporal layer in the layer control!"
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHOpenTabFileLC")
	Call ERRShow()

End Sub 'TABHOpenTabFileLC

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub TABHCloseTableLC

Dim	nMID, arrMIDs(), nLayerID, arrLayerIDs(), nLayer, nTab As Integer,
	sTab, arrTables(), sFile As String

OnError GoTo ErrorOccured

'	If LayerControlInfo(LC_INFO_SEL_COUNT) <> 1 Then
'		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_CONTROL")		'Note "Please select one layer in the Layer Control!"
'		Exit Sub
'	End If
	If LayerControlInfo(LC_INFO_SEL_COUNT) = 0 Then
		Note GetResItemStr("ERR_SELECT_AT_LEAST_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If

	If LayerControlSelectionInfo (1, LC_SEL_INFO_TYPE) <> LC_SEL_INFO_TYPE_LAYER Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_CONTROL")		'Note "Please select one layer in the Layer Control!"
		Exit Sub
	End If

	'**Looping through the selected layers
	For nLayer = 1 To LayerControlInfo(LC_INFO_SEL_COUNT)
		nMID		= LayerControlSelectionInfo (nLayer, LC_SEL_INFO_MAPWIN_ID)
		nLayerID	= LayerControlSelectionInfo (nLayer, LC_SEL_INFO_LAYER_ID)
		If nLayerID > 0 Then
			Do Case LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE)
				Case LAYER_INFO_TYPE_COSMETIC
					'** do nothing
				Case LAYER_INFO_TYPE_THEMATIC
					Call ARRAYAddValueInteger(arrMIDs, nMID)
					Call ARRAYAddValueInteger(arrLayerIDs, nLayerID)

				Case Else
					sTab 	= LayerInfo(nMID, nLayerID, LAYER_INFO_NAME)
					Call ARRAYAddValueString(arrTables, sTab)
			End Case
		End If
	Next

	'**Removing Thematic Layers
	For nLayer = Ubound(arrLayerIDs) To 1 Step -1
		Remove Map
			Window arrMIDs(nLayer)
			Layer arrLayerIDs(nLayer)
			Interactive
	Next

	'**Closing selected tables
	For nTab = 1 To Ubound(arrTables)
		Call TABClose(arrTables(nTab))
	Next

'	nMID		= LayerControlSelectionInfo(1, LC_SEL_INFO_MAPWIN_ID)
'	nLayerID	= LayerControlSelectionInfo(1, LC_SEL_INFO_LAYER_ID)
'
'	Do Case LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE)
'		Case LAYER_INFO_TYPE_COSMETIC
'			Exit Sub
'		Case LAYER_INFO_TYPE_THEMATIC
'			Remove Map
'				Window nMID
'				Layer nLayerID
'				Interactive
'		Case Else
'			sTab 	= LayerInfo(nMID, nLayerID, LAYER_INFO_NAME)
'			Close Table sTab Interactive
'	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHCloseTableLC")
	Call ERRShow()

End Sub 'TABHCloseTableLC

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub TABHBrowserFloatingTL

Dim	sTab As String

OnError GoTo ErrorOccured

	If TableListInfo(TL_INFO_SEL_COUNT) <> 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_TABLE_IN_TABLELIST")		'"Please select one table in the TableList window!"
		Exit Sub
	End If

	sTab		= TableListSelectionInfo (1, TL_SEL_INFO_NAME)

	If not TableInfo(sTab, TAB_INFO_TYPE) In (TAB_TYPE_IMAGE, TAB_TYPE_WMS, TAB_TYPE_TILESERVER) Then
		Browse * From sTab Floating
	Else

	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHBrowserFloatingTL")
	Call ERRShow()

End Sub	'TABHBrowserFloatingTL

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub TABHSetTextEditor(ByVal sTextEditor As String)

OnError GoTo ErrorOccured

	msTextEditor	= sTextEditor

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHSetTextEditor")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function TABHRegExReplace(ByVal sInput As String, ByVal sPattern As String, ByVal sReplace As String) As String

OnError GoTo ErrorOccured

	TABHRegExReplace = TABHRegExReplace(sInput, sPattern, sReplace)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHRegExReplace")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function TABHRegExIsMatch(ByVal sInput As String, ByVal sPattern As String) As Logical

OnError GoTo ErrorOccured

	TABHRegExIsMatch = RegExIsMatch(sInput, sPattern)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHRegExIsMatch")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function TABHRegExFirstMatch(ByVal sInput As String, ByVal sPattern As String) As String

OnError GoTo ErrorOccured

	TABHRegExFirstMatch = RegExFirstMatch(sInput, sPattern)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHRegExFirstMatch")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function TABHGetSelectionValue( ByVal nRowID As Integer
						, ByVal sColName As String
						) As String

Dim	sValue, sQuery As String,
	aCol As Alias

OnError GoTo ErrorOccured

TABHGetSelectionValue = ""

	sValue	= ""
	If SelectionInfo(SEL_INFO_NROWS) >= nRowID Then
		sQuery = SelectionInfo(SEL_INFO_SELNAME)
		If COLExists(sQuery, sColName) Then
			Fetch Rec nRowID From Selection

			aCol	= sQuery & "." & sColName
			Do Case ColumnInfo(sQuery, sColName, COL_INFO_TYPE)
				Case COL_TYPE_CHAR
					sValue = aCol
				Case COL_TYPE_INTEGER, COL_TYPE_SMALLINT, COL_TYPE_LOGICAL, COL_TYPE_LARGEINT
					sValue = Str$(aCol)
				Case COL_TYPE_FLOAT, COL_TYPE_DECIMAL
					sValue = FormatNumber$(aCol)
				Case COL_TYPE_DATE
					If aCol Then
						sValue = FormatDate$(aCol)
					End If
				Case COL_TYPE_TIME
					If aCol Then
						sValue = FormatTime$(acol, "HH:mm:ss")
					End If
				Case COL_TYPE_DATETIME
					If aCol Then
						sValue = FormatDate$(aCol) & " " & FormatTime$(GetTime(acol), "HH:mm:ss")
					End If
			End Case
		End If
		Close Table sQuery
	End If

TABHGetSelectionValue = sValue

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHGetSelectionValue: " & nRowID & " Column: " & sColName)
	Call ERRPrint()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function TABHCGetColumnValue(	  ByVal sTab As String
						, ByVal sCol As String
						, ByVal nRowID As Integer
						, ByVal bReturnError As Logical
						) As String

Dim	sValue As String,
	aCol As Alias,
	bCloseTable As Logical

OnError GoTo ErrorOccured

TABHCGetColumnValue = ""

	If sTab = "Selection" Then
		If SelectionInfo(SEL_INFO_NROWS) > 0 Then
			sTab		= SelectionInfo(SEL_INFO_SELNAME)
			bCloseTable	= TRUE
		Else
			If bReturnError Then
				TABHCGetColumnValue = "Error: Selection holds no records"
			End If
			Exit Function
		End If
	End If
	If NOT TABIsOpen(sTab) Then
		If bReturnError Then
			TABHCGetColumnValue = "Error: Table isn't open '" & sTab & "'"
		End If
		Exit Function
	ElseIf NOT COLExists(sTab, sCol) Then
		If bReturnError Then
			TABHCGetColumnValue = "Error: Table '" & sTab & "' hasn't this column '" & sCol & "'"
		End If
		Exit Function
	ElseIf nRowID > TableInfo(sTab, TAB_INFO_NROWS) Then
		If bReturnError Then
			TABHCGetColumnValue = "Error: RowID '" & FormatNumber$(nRowID) & "' is higher than number of records '" & FormatNumber$(TableInfo(sTab, TAB_INFO_NROWS)) & "'"
		End If
		Exit Function
	End If

	If nRowID > 0 Then
		Fetch Rec nRowID From sTab
	ElseIf EOT(sTab) Then
		If bReturnError Then
			TABHCGetColumnValue = "The cursor of the table '" & sTab & "' is at EOT"
		End If
		Exit Function
	End If

	aCol = sTab & "." & sCol

	Do Case ColumnInfo(sTab, sCol, COL_INFO_TYPE)
		Case COL_TYPE_CHAR
			sValue = aCol
		Case COL_TYPE_INTEGER, COL_TYPE_SMALLINT, COL_TYPE_LOGICAL, COL_TYPE_LARGEINT
			sValue = Str$(aCol)
		Case COL_TYPE_FLOAT, COL_TYPE_DECIMAL
			sValue = FormatNumber$(aCol)
		Case COL_TYPE_DATE
			If aCol Then
				sValue = FormatDate$(aCol)
			End If
		Case COL_TYPE_TIME
			If aCol Then
				sValue = FormatTime$(acol, "HH:mm:ss")
			End If
		Case COL_TYPE_DATETIME
			If aCol Then
				sValue = FormatDate$(aCol) & " " & FormatTime$(GetTime(acol), "HH:mm:ss")
			End If
	End Case

	If bCloseTable Then
		Close Table sTab
	End If
	TABHCGetColumnValue = sValue

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHCGetColumnValue")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub TABHFilterBrowserCurrentCell

OnError GoTo ErrorOccured

Dim	nWID, nRow, nCol As Integer,
	sTab, sCol, sCmd As String,
	sValue As String,
	fValue As Float,
	nValue As Integer

	nWID = FrontWindow()
	nRow = BrowserInfo(nWID, BROWSER_INFO_CURRENT_ROW)
	nCol = BrowserInfo(nWID, BROWSER_INFO_CURRENT_COLUMN)
	If nRow = 1 AND nCol = 0 AND mbIgnoreTopLeftCell Then
 		Call RBNNotificationShow("WindowHelper", GetResItemStr("ERR_NO_SELECT_SELECTED_TOP_LEFT_CELL_IGNORED"), Notify_Error, 5000)
		Exit Sub
	End If

	sTab	= WindowInfo(nWID, WIN_INFO_TABLE)
	sCol	= ColumnInfo(sTab, "COL" & (nCol + 1), COL_INFO_NAME)

	Do Case ColumnInfo(sTab, sCol, COL_INFO_TYPE)
		Case COL_TYPE_CHAR
			sValue	= BrowserInfo(nWID, BROWSER_INFO_CURRENT_CELL_VALUE)
			sCmd		= "Where (" & sCol & " = " & Chr$(34) & sValue & Chr$(34) & ")"

		Case COL_TYPE_DECIMAL, COL_TYPE_FLOAT
			fValue	= BrowserInfo(nWID, BROWSER_INFO_CURRENT_CELL_VALUE)
			sCmd		= "Where (" & sCol & " = " & DeformatNumber$(Format$(fValue, "#.##########")) & ")"

		Case COL_TYPE_INTEGER, COL_TYPE_SMALLINT
			nValue	= BrowserInfo(nWID, BROWSER_INFO_CURRENT_CELL_VALUE)
			sCmd		= "Where (" & sCol & " = " & Str$(nValue) & ")"

  		Case Else
  			Call RBNNotificationShow("WindowHelper", GetResItemStr("ERR_ONLY_CHAR_AND_NUM_COLS_SUPPORTED"), Notify_Error, 5000)
  			Exit Sub

  	End Case

	sCmd = "Set Browse"
			& " Window " & nWID
			& " Filter " & sCmd
	Call DEBUGPrint(sCmd)
	Run Command sCmd

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHFilterBrowserCurrentCell")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub TABHGroupByCurrentColumn

OnError GoTo ErrorOccured

Dim	nWID, nRow, nCol As Integer,
	sTab, sCol, sCmd As String

	nWID = FrontWindow()
	nRow = BrowserInfo(nWID, BROWSER_INFO_CURRENT_ROW)
	nCol = BrowserInfo(nWID, BROWSER_INFO_CURRENT_COLUMN)
	If nRow = 1 AND nCol = 0 AND mbIgnoreTopLeftCell Then
 		Call RBNNotificationShow("WindowHelper", GetResItemStr("ERR_NO_SELECT_SELECTED_TOP_LEFT_CELL_IGNORED"), Notify_Error, 5000)
		Exit Sub
	End If

	sTab	= WindowInfo(nWID, WIN_INFO_TABLE)
	sCol	= ColumnInfo(sTab, "COL" & (nCol + 1), COL_INFO_NAME)

	sCmd = "Select " & sCol & ", Count(*) " & Chr$(34) & "NumRecords" & Chr$(34)
			& " From " & sTab
			& " Group By " & sCol
			& " Order By " & sCol
			& " Into " & sTab & "_GrpOn_" & sCol & " NoSelect"
	Call DEBUGPrint(sCmd)
	Run Command sCmd
	Browse * From sTab & "_GrpOn_" & sCol Floating

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHGroupByCurrentColumn")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub TABHSetIgnoreTopLeftCell(ByVal bValue As Logical)

OnError GoTo ErrorOccured

	mbIgnoreTopLeftCell	= bValue

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHSetTextEditor")
	Call ERRShow()

End Sub
'**********************************************************************************************''
Function TABHGetIgnoreTopLeftCell() As Logical

OnError GoTo ErrorOccured

	TABHGetIgnoreTopLeftCell = mbIgnoreTopLeftCell
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "TABHGetIgnoreTopLeftCell")
	Call ERRShow()

End Function