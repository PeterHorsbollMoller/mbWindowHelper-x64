'*******************************************************************************
'** 	Created By Peter Horsbøll Møller, Pitney Bowes Business Insight
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Icons.def"
Include "Menu.def"
Include "Enums.def"
'**default constants...
Include "Library\Defaults.def"

'-------------------------------------
Include "Library\COLUMNLib.def"
Include "Library\DEBUGLib.def"
Include "Library\ERRORLib.def"
Include "Library\LAYERLib.def"
Include "Library\MAPPERLib.def"
Include "Library\ProgramInfo.def"
Include "Library\RIBBONLib.def"
Include "Library\STRINGLib.def"
Include "Library\STYLELib.def"
Include "Library\TABLELib.def"
Include "Library\THEMELib.def"
Include "Library\Dialogs\DLGSelectTableAndColumn.def"
Include "Library\Types\T_LABEL_SETTINGS.def"
Include "Library\Types\T_LAYER_SETTINGS.def"
Include "Library\Types\T_LAYER_INFO.def"

Include "DLGQuickThemeRanged.def"
Include "DLGQuickThemeIndividual.def"
Include "MapHelper.def"
Include "DLGWHOWindowHelperOptions.def"
Include "WindowHelper.Assembly.def"

Include "DLGAdvancedLayerRename.def"
Include "DLGMultipleLayersRename.def"

Dim	mtli As T_LAYER_INFO,
	mbLayerInfoRead As Logical,
	mnNumBins, mnCurrentBin As Integer,
	msThemeBaseTab As String,
	marrItems() As T_INDIVIDUAL_ITEMS
'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MAPHRenameLayerAdvancedLC

Dim	nMID, nLayerID, nWin As Integer

OnError GoTo ErrorOccured

	If LayerControlInfo(LC_INFO_SEL_COUNT) = 0 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	ElseIf LayerControlInfo(LC_INFO_SEL_COUNT) > 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If

	nMID		= LayerControlSelectionInfo (1, LC_SEL_INFO_MAPWIN_ID)
	nLayerID	= LayerControlSelectionInfo (1, LC_SEL_INFO_LAYER_ID)

	If nLayerID = -1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If
	If LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_COSMETIC Then
		Note GetResItemStr("ERR_COSMETIC_LAYER_NOT_SUPPORTED")
		Exit Sub
	End If

	If NOT DLGAdvancedLayerRename(nMID, nLayerID) Then
		Exit Sub
	End If

	Set Map
		Window nMID
		Layer nLayerID FriendlyName DALRGetNewFriendlyName()

	If DALRSetAsDefaultDescription() Then
		Call DEBUGPrint("Set Table " & DALRGetTableName() & " Description " & DALRGetNewFriendlyName())
		Set Table DALRGetTableName()
			Description DALRGetNewFriendlyName()
	End If

	If DALRRenameInAllMaps() Then
		For nWin = 1 To NumWindows()
			nMID = WindowID(nWin)
			If WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
				For nLayerID = 1 To MapperInfo(nMID, MAPPER_INFO_LAYERS)
					If LayerInfo(nMID, nLayerID, WIN_INFO_NAME) = DALRGetLayerName() Then
						Set Map
							Window nMID
							Layer nLayerID FriendlyName DALRGetNewFriendlyName()
					End If
				Next
			End If
		Next
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHRenameLayerAdvanced")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MAPHRenameMultipleLayersLC

Dim	nMID, nLayerID, nWin As Integer,
	sTab, sDescription, sFriendlyName, sNewFriendlyName As String,
	bHasFriendlyName As Logical

OnError GoTo ErrorOccured

	If NOT LayerControlInfo(LC_INFO_SEL_COUNT) = 1 Then
		Note "1: " & GetResItemStr("ERR_SELECT_ONE_MAP_IN_LAYER_CONTROL")
		Exit Sub
	End If
'	If LayerControlSelectionInfo(1, LC_SEL_INFO_TYPE ) = LC_SEL_INFO_TYPE_MAP  Then
'		Note "2: " & GetResItemStr("ERR_SELECT_ONE_MAP_IN_LAYER_CONTROL")
'		Exit Sub
'	End If

	nMID		= LayerControlSelectionInfo (1, LC_SEL_INFO_MAPWIN_ID)
	If nMID = 0 Then
		Note "3: " & GetResItemStr("ERR_SELECT_ONE_MAP_IN_LAYER_CONTROL")
		Exit Sub
	End If

	If NOT DLGMultipleLayersRename(nMID) Then
		Exit Sub
	End If

	Call DEBUGPrint("Using existing Table Description = " & DMLRUseExistingTableDescription())
	Call DEBUGPrint("Skip Layers with a Friendly Name = " & DMLRSkipLayersWithFriendlyName())

	For nLayerID = 1 To MapperInfo(nMID, MAPPER_INFO_LAYERS)
		If NOT LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE) IN (LAYER_INFO_TYPE_COSMETIC, LAYER_INFO_TYPE_THEMATIC, LAYER_INFO_TYPE_GRIDLINE) Then
			sTab				= LayerInfo(nMID, nLayerID, LAYER_INFO_NAME)
			Call DEBUGPrint("Layer: " & sTab)
			sFriendlyName		= LayerInfo(nMID, nLayerID, LAYER_INFO_FRIENDLYNAME)
			Call DEBUGPrint("   Friendly Name: " & sFriendlyName)
			sDescription		= TableInfo(sTab, TAB_INFO_DESCRIPTION)
			Call DEBUGPrint("   Table Description: " & sDescription)
			sNewFriendlyName	= PathToFileName$(TableInfo(sTab, TAB_INFO_TABFILE))
			sNewFriendlyName	= Left$(sNewFriendlyName, Len(sNewFriendlyName) - 4)
			sNewFriendlyName	= STRINGReplace(sNewFriendlyName, "_", " ")
			Call DEBUGPrint("   New Friendly Name (1): " & sNewFriendlyName)

			If DMLRUseExistingTableDescription() Then
				If NOT (sDescription = "" OR sDescription = sTab) Then
					sNewFriendlyName	= sDescription
				End If
			End If
			Call DEBUGPrint("   New Friendly Name (2): " & sNewFriendlyName)

			If sTab = sFriendlyName Then
				Call DEBUGPrint("   Layer has already a friendly name")
				bHasFriendlyName = FALSE
			Else
				bHasFriendlyName = TRUE
			End If

			If DMLRSkipLayersWithFriendlyName() AND bHasFriendlyName Then
				'**Do nothing
				Call DEBUGPrint("   Ignoring this Layer")
			Else
				Call DEBUGPrint("   Chainging Friendly Layer Name to: " & sNewFriendlyName)
				Set Map
					Window nMID
					Layer nLayerID FriendlyName sNewFriendlyName
			End If

			If DMLRSetAsDefaultDescription() AND sNewFriendlyName <> sDescription Then
				Call DEBUGPrint("Set Table " & DALRGetTableName() & " Description " & sNewFriendlyName)
				Set Table sTab
					Description sNewFriendlyName
			End If

'			If DMLRRenameInAllMaps() Then
'				For nWin = 1 To NumWindows()
'					nMID = WindowID(nWin)
'					If WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
'						For nLayerID = 1 To MapperInfo(nMID, MAPPER_INFO_LAYERS)
'							If LayerInfo(nMID, nLayerID, WIN_INFO_NAME) = sTab Then
'								Set Map
'									Window nMID
'									Layer nLayerID FriendlyName sFriendlyName
'							End If
'						Next
'					End If
'				Next
'			End If
		End If
	Next

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHRenameMultipleLayers")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MAPHCloneMapLC

Dim	nMID As Integer

OnError GoTo ErrorOccured

	If NOT LayerControlInfo(LC_INFO_SEL_COUNT) = 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_MAP_IN_LAYER_CONTROL")
		Exit Sub
	End If

	nMID		= LayerControlSelectionInfo (1, LC_SEL_INFO_MAPWIN_ID)
	If nMID = 0 Then
		Note GetResItemStr("ERR_SELECT_ONE_MAP_IN_LAYER_CONTROL")
		Exit Sub
	End If

	Set Window nMID Front
	Run Menu Command M_MAP_CLONE_MAPPER

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHCloneMapLC")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MAPHMenuStaticTheme

Dim	nObjectTypes As Integer,
	oFirst As Object,
	aObj As Alias

OnError GoTo ErrorOccured

	If not DLGSelectTableAndColumn(TAB_USE_ALL_MAPPABLE_BUT_IMAGES + TAB_USE_READONLY, GetResItemStr("DLG_STATIC_THEME"), GetResItemStr("DLG_STATIC_THEME_SELECT_TABLE"), DLGSTCGetTableName()
							, CRITERIA_USE_CHAR + CRITERIA_USE_INTEGER + CRITERIA_USE_SMALLINT, GetResItemStr("DLG_STATIC_THEME_SELECT_COLUMN"), DLGSTCGetColumnName(), GetResItemStr("STR_OPEN") & "...", TRUE) Then
		Exit Sub
	End If

	Fetch First From DLGSTCGetTableName()
	aObj 	= DLGSTCGetTableName() & ".OBJ"
	oFirst	= aObj

	Do Case ObjectInfo(oFirst, OBJ_INFO_TYPE)
		Case OBJ_TYPE_ARC, OBJ_TYPE_LINE, OBJ_TYPE_PLINE
			nObjectTypes = THEME_OBJ_TYPE_LINES

		Case OBJ_TYPE_ELLIPSE, OBJ_TYPE_REGION, OBJ_TYPE_RECT, OBJ_TYPE_ROUNDRECT
			nObjectTypes = THEME_OBJ_TYPE_POLYGONS

		Case OBJ_TYPE_POINT
			nObjectTypes = THEME_OBJ_TYPE_POINTS

		Case Else
			Note GetResItemStrReplace("ERR_UNSUPPORTED_OBJECT_TYPE", Str$(oFirst))
	End Case

	Call MAPHThemeUsingCurrentStyles(nObjectTypes, 0, DLGSTCGetTableName(), DLGSTCGetColumnName())

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHThemeUsingCurrentStyles")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MAPHThemeUsingCurrentStyles(	  ByVal nObjectTypes As Integer
							, ByVal nMID As Integer
							, ByVal sTab As String
							, ByVal sCol As String
							)

Dim	aCol As Alias,
	nLayer As Integer,
	sShadeCmd, sThemeCmd, sLegendCmd, sLegendElementsCmd As String

OnError GoTo ErrorOccured

	If nMID = 0 Then
		nMID = FrontWindow()
		If nMID = 0 Then
			'**No windows open
		ElseIf NOT WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
			nMID = MAPFrontMostWindow()
		End If
	End If

	If nMID = 0 Then
		Map From sTab
		nMID = FrontWindow()
		nLayer = 1
	Else
		nLayer = LAYERGetLayerNumber(nMID, sTab)
		If nLayer = 0 Then
			Add Map
				Window nMID
				Layer sTab
			nLayer = 1
		End If
	End If

	aCol = sTab & "." & sCol

	Do Case nObjectTypes
		Case THEME_OBJ_TYPE_POLYGONS
			Select aCol "VALUE", Str$(ObjectInfo(OBJ, OBJ_INFO_BRUSH)) "BRUSH", Str$(ObjectInfo(OBJ, OBJ_INFO_PEN)) "PEN"
				From sTab
				Where OBJ
				Group By aCol
				Order By aCol
				Into __THEME__STYLES NoSelect 'Hide
		Case THEME_OBJ_TYPE_LINES
			Select aCol "VALUE", Str$(ObjectInfo(OBJ, OBJ_INFO_PEN)) "PEN"
				From sTab
				Where OBJ
				Group By aCol
				Order By aCol
				Into __THEME__STYLES NoSelect Hide
		Case THEME_OBJ_TYPE_POINTS
			Select aCol "VALUE", Str$(ObjectInfo(OBJ, OBJ_INFO_SYMBOL)) "SYMBOL"
				From sTab
				Where OBJ
				Group By aCol
				Order By aCol
				Into __THEME__STYLES NoSelect Hide
	End Case

	Call DEBUGPrint("Number of unique values: " & TableInfo(__THEME__STYLES, TAB_INFO_NROWS))

	Fetch First From __THEME__STYLES
	Do Until EOT(__THEME__STYLES)
		If sThemeCmd = "" Then
			Do Case nObjectTypes
				Case THEME_OBJ_TYPE_POLYGONS
					sThemeCmd	= " Values " & eye & __THEME__STYLES.VALUE & eye & " " & __THEME__STYLES.PEN & " " & __THEME__STYLES.BRUSH
				Case THEME_OBJ_TYPE_LINES
					sThemeCmd	= " Values " & eye & __THEME__STYLES.VALUE & eye & " " & STRINGReplace(__THEME__STYLES.PEN, "Pen", "line")
				Case THEME_OBJ_TYPE_POINTS
					sThemeCmd	= " Values " & eye & __THEME__STYLES.VALUE & eye & " " & __THEME__STYLES.SYMBOL
			End Case

			sLegendElementsCmd	= eye & __THEME__STYLES.VALUE & eye & " Display On"
		Else
			Do Case nObjectTypes
				Case THEME_OBJ_TYPE_POLYGONS
					sThemeCmd = sThemeCmd & ", " & eye & __THEME__STYLES.VALUE & eye & " " & __THEME__STYLES.PEN & " " & __THEME__STYLES.BRUSH
				Case THEME_OBJ_TYPE_LINES
					sThemeCmd	= sThemeCmd & ", " & eye & __THEME__STYLES.VALUE & eye & " " & STRINGReplace(__THEME__STYLES.PEN, "Pen", "line")
				Case THEME_OBJ_TYPE_POINTS
					sThemeCmd	= sThemeCmd & ", " & eye & __THEME__STYLES.VALUE & eye & " " & __THEME__STYLES.SYMBOL
			End Case

			sLegendElementsCmd	= sLegendElementsCmd & ", " & eye & __THEME__STYLES.VALUE & eye & " Display On"
		End if

		Fetch Next From __THEME__STYLES
	Loop

'	Close Table __THEME__STYLES

	sShadeCmd = "Shade Window " & nMID
		& " " & nLayer
		& " With " & sCol
		'[ Ignore value_to_ignore ]
		'Values const [ Pen... ] [ Line...] [ Brush... ] [ Symbol... ]
		'[ , const [ Pen... ] [ Line...] [ Brush... ] [ Symbol... ] ... ]
		'[ Vary { Color | All } ]
		'[ Style Replace { On | Off } ]
		'[ Default [ Pen... ] [ Brush... ] [ Symbol... ] ]
		& sThemeCmd

	Call DEBUGPrint("sShadeCmd: " & sShadeCmd)
	Run Command sShadeCmd

	sLegendCmd = "Set Legend Window " & nMID
		& " Layer " & sTab
		& "  Display On"
	Do Case nObjectTypes
		Case THEME_OBJ_TYPE_POLYGONS
			sLegendCmd = sLegendCmd & " Shades On Symbols Off Lines Off"
		Case THEME_OBJ_TYPE_LINES
			sLegendCmd = sLegendCmd & " Shades Off Symbols Off Lines On"
		Case THEME_OBJ_TYPE_POINTS
			sLegendCmd = sLegendCmd & " Shades Off Symbols On Lines Off"
	End Case

	sLegendCmd = sLegendCmd & " Count On"
'	[ Title { Auto | layer_title [ Font... ] } ]
'	[ SubTitle { Auto | layer_subtitle [ Font... ] } ]
'	[ Region [ Height region_height [ Units paper_units ] ] ]
'	[ Region [ Width region_width [ Units paper_units ] ] ]
'	[ Line [ Width line_width [ Units paper_units ] ] ]
'	[ Auto Font Size { On | Off } ]
'	[ Style Size { Large | Small } ]
'	[ Columns number_of_columns ]
'	[ Ascending { On | Off } | Order { Ascending | Descending | Custom } ]
'	[ Ranges { Auto | [ Font... ]
'	[ Range { range_identifier | default } ]
'	range_title [ Display { On | Off } ] }
		& sLegendElementsCmd

	Call DEBUGPrint("sLegendCmd: " & sLegendCmd)
'	Run Command sLegendCmd

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHThemeUsingCurrentStyles")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MAPHMenuQuickThemeRangedLC

Dim	nMID, nLayerID, nCol, nColor As Integer,
	nLayerTypesToUse As Integer,
	sTab, sCol, sCmd As String,
	aCol As Alias,
	arrRanges() As Float,
	brsFrom, brsTo, arrBrushes() As Brush,
	arrPens() As Pen,
	arrSymbols() As Symbol

OnError GoTo ErrorOccured

	If LayerControlInfo(LC_INFO_SEL_COUNT) = 0 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	ElseIf LayerControlInfo(LC_INFO_SEL_COUNT) > 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If

	nMID		= LayerControlSelectionInfo (1, LC_SEL_INFO_MAPWIN_ID)
	nLayerID	= LayerControlSelectionInfo (1, LC_SEL_INFO_LAYER_ID)

	If nLayerID = -1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If
	If LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_COSMETIC Then
		Note GetResItemStr("ERR_COSMETIC_LAYER_NOT_SUPPORTED")
		Exit Sub
	End If
	If Not LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_NORMAL Then
		Note GetResItemStr("ERR_SELECT_NORMAL_LAYER_IN_LAYER_CONTROL")
		Exit Sub
	End If

'	nLayerTypesToUse	= LAYER_USE_NORMAL + LAYER_USE_TEMP	' + LAYER_USE_ONLY_SELECTABLE	'+ LAYER_USE_ONLY_VISIBLE
'	If Not DLGSelectLayerAndColumn(nMID, nLayerTypesToUse, GetResItemStr("DLG_TITLE_QUICK_THEME_RANGED"), GetResItemStr("DLG_THEME_SELECT_LAYER")
'								, nLayerID, "", CRITERIA_USE_NUMERICAL, GetResItemStr("DLG_THEME_SELECT_COLUMN"), "") Then
'		Exit Sub
'	End If

	If Not DLGQuickThemeRanged(nMID, nLayerID, "") Then
		Exit Sub
	End If

	nLayerID	= DLGQTRGetLayerID()
	sTab		= DLGQTRGetLayerName()
	sCol		= DLGQTRGetColumnName()

	aCol = sTab & "." & sCol

	Create Ranges
		From sTab
		With aCol
		Use "Natural Break"
		Number DLGQTRGetRangeCount()
		'Round rounding_factor
		Into Variable arrRanges

	Do Case TableInfo(sTab, TAB_INFO_DOMINANT_OBJECT_TYPE)
		Case TAB_AREA_OBJECTS
			If Not DLGQTRUseFixedColors() Then
				If DLGQTRGetChangeBrushColorType() = RANGE_CHANGE_FOREGROUND_COLOR Then
					Create Styles
	'					From Brush MakeBrush(2,DLGQTRGetFromColor(),16777215) 'style for LOW range,
	'					To Brush MakeBrush (2,DLGQTRGetToColor(),16777215) 'style for HIGH range
						From Brush STLChangeBrushFGColour(DLGQTRGetBrush(), DLGQTRGetFromColor())	'Brush MakeBrush(..) 'style for LOW range,
						To Brush STLChangeBrushFGColour(DLGQTRGetBrush(), DLGQTRGetToColor())		'Brush MakeBrush (..) 'style for HIGH range
						Vary Color By "RGB"
						Number DLGQTRGetRangeCount()
						Into Variable arrBrushes
				Else
					Create Styles
	'					From Brush MakeBrush(2,DLGQTRGetFromColor(),16777215) 'style for LOW range,
	'					To Brush MakeBrush (2,DLGQTRGetToColor(),16777215) 'style for HIGH range
						From Brush STLChangeBrushBGColour(DLGQTRGetBrush(), DLGQTRGetFromColor())	'Brush MakeBrush(..) 'style for LOW range,
						To Brush STLChangeBrushBGColour(DLGQTRGetBrush(), DLGQTRGetToColor())	'Brush MakeBrush (..) 'style for HIGH range
						Vary Color By "RGB"
						Number DLGQTRGetRangeCount()
						Into Variable arrBrushes
				End If
			Else
				Redim arrBrushes(DLGQTRGetRangeCount())
				If DLGQTRGetChangeBrushColorType() = RANGE_CHANGE_FOREGROUND_COLOR Then
					For nColor = 1 To DLGQTRGetRangeCount()
						'arrBrushes(nColor) = MakeBrush(2,DLGQTRGetFixedColor(nColor),16777215)
						arrBrushes(nColor) = STLChangeBrushFGColour(DLGQTRGetBrush(), DLGQTRGetFixedColor(nColor))
					Next
				Else
					For nColor = 1 To DLGQTRGetRangeCount()
						'arrBrushes(nColor) = MakeBrush(2,DLGQTRGetFixedColor(nColor),16777215)
						arrBrushes(nColor) = STLChangeBrushBGColour(DLGQTRGetBrush(), DLGQTRGetFixedColor(nColor))
					Next
				End If
			End If

'			Shade Window nMID
'				nLayerID
'				with aCol
'				Ranges From Variable arrRanges
'				Style Variable arrBrushes
''				Pen (1,1,0)
''				Pen DLGQTRGetBorderPen()

			For nColor = 1 To DLGQTRGetRangeCount()
				'nColor 1: 1 : 2
				'nColor 2: 3 : 4
				'nColor 3: 5 : 6
				If sCmd = "" Then
					sCmd = arrRanges((nColor * 2) - 1) & " : " & arrRanges(nColor * 2) & " " & DLGQTRGetBorderPen() & " " & arrBrushes(nColor)
				Else
					sCmd = sCmd & ", " & arrRanges((nColor * 2) - 1) & " : " & arrRanges(nColor * 2) & " " & DLGQTRGetBorderPen() & " " & arrBrushes(nColor)
				End If
			Next

			sCmd	= "Shade Window " & nMID & " " & nLayerID & " With " & sCol & " Ranges " & sCmd
			Run Command sCmd

		Case TAB_POINT_OBJECTS
			If Not DLGQTRUseFixedColors() Then
				Create Styles
'					From Symbol MakeFontSymbol(57,DLGQTRGetFromColor(),10,"MapInfo Symbols",0,0) 'style for LOW range,
'					To Symbol MakeFontSymbol(57,DLGQTRGetToColor(),10,"MapInfo Symbols",0,0) 'style for HIGH range
					From Symbol STLChangeSymbolColour(DLGQTRGetSymbol(), DLGQTRGetFromColor())		'Symbol MakeFontSymbol(..) 'style for LOW range,
					To Symbol STLChangeSymbolColour(DLGQTRGetSymbol(), DLGQTRGetToColor())		'Symbol MakeFontSymbol(..) 'style for HIGH range
					Vary Color By "RGB"
					Number DLGQTRGetRangeCount()
					Into Variable arrSymbols
			Else
				Redim arrSymbols(DLGQTRGetRangeCount())
				For nColor = 1 To DLGQTRGetRangeCount()
					'arrSymbols(nColor) = MakeFontSymbol(57,DLGQTRGetFixedColor(nColor),10,"MapInfo Symbols",0,0)
					arrSymbols(nColor) = STLChangeSymbolColour(DLGQTRGetSymbol(), DLGQTRGetToColor())
				Next
			End If

			Shade Window nMID
				nLayerID
				with aCol
				Ranges From Variable arrRanges
				Style Variable arrSymbols

		Case TAB_LINE_OBJECTS
			If Not DLGQTRUseFixedColors() Then
				Create Styles
'					From Pen MakePen(2,2,DLGQTRGetFromColor()) 'style for LOW range,
'					To Pen MakePen (2,2,DLGQTRGetToColor()) 'style for HIGH range
					From Pen STLChangePenColour(DLGQTRGetLinePen(), DLGQTRGetFromColor())	'Pen MakePen(..) 'style for LOW range,
					To Pen STLChangePenColour(DLGQTRGetLinePen(), DLGQTRGetToColor())	'Pen MakePen (..) 'style for HIGH range
					Vary Color By "RGB"
					Number DLGQTRGetRangeCount()
					Into Variable arrPens()
			Else
				Redim arrPens(DLGQTRGetRangeCount())
				For nColor = 1 To DLGQTRGetRangeCount()
					'arrPens(nColor) =  MakePen (2,2,DLGQTRGetFixedColor(nColor))
					arrPens(nColor) =  STLChangePenColour(DLGQTRGetLinePen(), DLGQTRGetFixedColor(nColor))
				Next
			End If

			Shade Window nMID
				nLayerID
				with aCol
				Ranges From Variable arrRanges
				Style Variable arrPens()

	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHMenuQuickThemeRangedLC")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MAPHMenuQuickThemeIndividualLC

Dim	nMID, nLayerID, nCol, nBins, nBin, nColors, nLayerTypesToUse As Integer,
	sTab, sCol, sCmd As String

OnError GoTo ErrorOccured

	If LayerControlInfo(LC_INFO_SEL_COUNT) = 0 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	ElseIf LayerControlInfo(LC_INFO_SEL_COUNT) > 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If

	nMID		= LayerControlSelectionInfo (1, LC_SEL_INFO_MAPWIN_ID)
	nLayerID	= LayerControlSelectionInfo (1, LC_SEL_INFO_LAYER_ID)

	If nLayerID = -1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If
	If LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_COSMETIC Then
		Note GetResItemStr("ERR_COSMETIC_LAYER_NOT_SUPPORTED")
		Exit Sub
	End If
	If Not LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_NORMAL Then
		Note GetResItemStr("ERR_SELECT_NORMAL_LAYER_IN_LAYER_CONTROL")
		Exit Sub
	End If

	If Not DLGQuickThemeIndividual(nMID, nLayerID, "") Then
		Exit Sub
	End If

	nLayerID	= DLGQTIGetLayerID()
	sTab		= DLGQTIGetLayerName()
	sCol		= DLGQTIGetColumnName()

	nColors	= DLGQTIPrepareColors()
	nBins	= DLGQTIGetBinCount()

	sCmd = "Shade Window " & nMID & " " & nLayerID & " With " & sCol & " Values"
'		[ , const [ Pen... ] [ Line...] [ Brush... ] [ Symbol... ] ... ]
'		[ Vary { Color | All } ]
'		[ Style Replace { On | Off } ]
'		[ Default [ Pen... ] [ Brush... ] [ Symbol... ] ]

	For nBin = 1 To nBins
		If ColumnInfo(sTab, sCol, COL_INFO_TYPE) = COL_TYPE_CHAR Then
			sCmd = sCmd & " " & IIf(nBin = 1,"",",") & Chr$(34) & DLGQTIGetBinValue(nBin) & Chr$(34)
		Else
			sCmd = sCmd & " " & IIf(nBin = 1,"",",") & DeformatNumber$(DLGQTIGetBinValue(nBin))
		End If

		Do Case TableInfo(sTab, TAB_INFO_DOMINANT_OBJECT_TYPE)
			Case TAB_AREA_OBJECTS
				'sCmd = sCmd & " Brush MakeBrush(2, " & DLGQTIGetBinColor(nBin) & ", 16777215) Pen(1,1,0)"
				sCmd = sCmd & " " & DLGQTIGetBinBrush(nBin) & " " & DLGQTIGetBorderPen()
			Case TAB_LINE_OBJECTS
				'sCmd = sCmd & " Pen MakePen(2, 2, " & DLGQTIGetBinColor(nBin) & ")"
				sCmd = sCmd & " " & STRINGReplace(DLGQTIGetBinLine(nBin), "Pen", "Line")
			Case TAB_POINT_OBJECTS
				'sCmd = sCmd & " Symbol MakeFontSymbol(57, " & DLGQTIGetBinColor(nBin) & ", 10, " & Chr$(34) & "MapInfo Symbols" & Chr$(34) & ", 0, 0)"
				sCmd = sCmd & " " & DLGQTIGetBinSymbol(nBin)
		End Case
	Next

	Call DEBUGPrint(sCmd)
	Run Command sCmd

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHMenuQuickThemeIndividualLC")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MAPHGetCartographicScale(ByVal nMID As Integer) As Integer

Dim	fMapWidth, fWinWidth As Float

OnError GoTo ErrorOccured

MAPHGetCartographicScale = "0"

	Set Distance Units "cm"
'	fMapWidth = Distance(MapperInfo(nMID, MAPPER_INFO_MINX), MapperInfo(nMID, MAPPER_INFO_MINY), MapperInfo(nMID, MAPPER_INFO_MAXX), MapperInfo(nMID, MAPPER_INFO_MINY), "m")
	fMapWidth = MapperInfo(nMID, MAPPER_INFO_ZOOM)

'	Print "Map Zoom, cm: " & fMapWidth

	Set Paper Units "cm"
	If SystemInfo(SYS_INFO_MAPINFO_INTERFACE) = MIINTERFACE_CLASSICMENU Then
		fWinWidth = WindowInfo(nMID, WIN_INFO_WIDTH)
	Else
		fWinWidth = WindowInfo(nMID, WIN_INFO_CLIENTWIDTH)
	End if

'	Print "Win Width, cm: " & fWinWidth

'	MAPHGetCartographicScale = fMapWidth / fWinWidth
	MAPHGetCartographicScale = Round(fMapWidth / fWinWidth, 1)
'	MAPHGetCartographicScale = Round((fMapWidth * 100) / fWinWidth, 1)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHGetCartographicScale")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MAPHGetCoordinate(	  ByVal nMID As Integer
						, ByVal sCoordinate As String
						) As Float

OnError GoTo ErrorOccured

MAPHGetCoordinate = "0"

	Set CoordSys Window nMID

	Do Case sCoordinate
		Case "MINX"
			MAPHGetCoordinate = MapperInfo(nMID, MAPPER_INFO_MINX)
		Case "MAXX"
			MAPHGetCoordinate = MapperInfo(nMID, MAPPER_INFO_MAXX)
		Case "MINY"
			MAPHGetCoordinate = MapperInfo(nMID, MAPPER_INFO_MINY)
		Case "MAXY"
			MAPHGetCoordinate = MapperInfo(nMID, MAPPER_INFO_MAXY)
		Case "CENX", "CENTX", "CENTERX"
			MAPHGetCoordinate = MapperInfo(nMID, MAPPER_INFO_CENTERX)
		Case "CENY", "CENTY", "CENTERY"
			MAPHGetCoordinate = MapperInfo(nMID, MAPPER_INFO_CENTERY)
	End Case

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHGetCoordinate")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MAPHSelectWithinMap

Dim	nMID, nLayer As Integer,
	oExtent As Object,
	sText, sLayer As String

OnError GoTo ErrorOccured

	nMID	= MAPFrontMostWindow()
	If nMID = 0 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), GetResItemStr("ERR_FRONT_WIN_NOT_MAPPER"), Notify_Error, 10000)
		Exit Sub
	End If

	For nLayer = 1 To MapperInfo(nMID, MAPPER_INFO_LAYERS)
		If LayerInfo(nMID, nLayer, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_NORMAL Then
			If NOT LayerInfo(nMID, nLayer, LAYER_INFO_DISPLAY) = LAYER_INFO_DISPLAY_OFF Then
				If LayerInfo(nMID, nLayer, LAYER_INFO_SELECTABLE) Then
					sLayer = LayerInfo(nMID, nLayer, LAYER_INFO_NAME)
				End If
			End If
		End If
	Next

	If sLayer = "" Then
		Call RBNNotificationShow(PRGIGetApplicationName(), GetResItemStr("ERR_NO_SELECTABLE_LAYER"), Notify_Error, 10000)
		Exit Sub
	End If

'	sText = "Selecting from the table " & sLayer
'		& lf & "Where the objects are within the extent of the map " & WindowInfo(nMID, WIN_INFO_NAME)
'	Call RBNNotificationShow(PRGIGetApplicationName(), sText, Notify_Info, 10000)

	oExtent	= MAPGetExtent(nMID)
	Select * From sLayer
		Where OBJ Within oExtent

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHSelectWithinMap")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MAPHZoomToSelectionInFrontMap

Dim	nMID, nBID As Integer

OnError GoTo ErrorOccured

	If SelectionInfo(SEL_INFO_NROWS) = 0 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), GetResItemStr("ERR_SELECTION_NO_RECORDS"), Notify_Error, 10000)
		Exit Sub
	End If

	nBID	= FrontWindow()

	nMID	= MAPFrontMostWindow()
	If nMID = 0 Then
		Exit Sub
	End If

	Set Window nMID Front
	Run Menu Command M_VIEW_ZOOM_TO_SELECTED_OBJECTS

	If nBID > 0 And nBID <> nMID Then
		Set Window nMID Front
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHZoomToSelectionInFrontMap")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MAPHPanToSelectionInFrontMap

Dim	nMID As Integer,
	sQuery As String,
	aObj As Alias,
	fX, fY As Float

OnError GoTo ErrorOccured

	If SelectionInfo(SEL_INFO_NROWS) <> 1 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), GetResItemStr("ERR_SELECTION_NOT_ONE_RECORD"), Notify_Error, 10000)
		Exit Sub
	End If

	nMID	= MAPFrontMostWindow()
	If nMID = 0 Then
		Exit Sub
	End If

	sQuery	= SelectionInfo(SEL_INFO_SELNAME)
	Fetch First From sQuery
	aObj = sQuery & ".OBJ"
	If not aObj Then
		Call RBNNotificationShow(PRGIGetApplicationName(), GetResItemStr("ERR_SELECTION_HAS_NO_SPATIAL_OBJECT"), Notify_Error, 10000)
		Close Table sQuery
		Exit Sub
	End If

	Set CoordSys Window nMID
	fX	= CentroidX(MBR(aObj))
	fY	= CentroidY(MBR(aObj))

	Set Map
		Window nMID
		Center (fX, fY)

	Close Table sQuery

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHPanToSelectionInFrontMap")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MAPHAddSmartTextMapTitle

Dim	nMID As Integer

OnError GoTo ErrorOccured

'	ADORNMENT_INFO_MAP_POS_TL (0)
'	ADORNMENT_INFO_MAP_POS_TC (1)
'	ADORNMENT_INFO_MAP_POS_TR (2)
'	ADORNMENT_INFO_MAP_POS_CL (3)
'	ADORNMENT_INFO_MAP_POS_CC (4)
'	ADORNMENT_INFO_MAP_POS_CR (5)
'	ADORNMENT_INFO_MAP_POS_BL (6)
'	ADORNMENT_INFO_MAP_POS_BC (7)
'	ADORNMENT_INFO_MAP_POS_BR (8)

	nMID = FrontWindow()
	If nMID = 0 Then
		Note GetResItemStr("ERR_NO_WIN_OPEN")
		Exit Sub
	End If
	If Not WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
		Note GetResItemStr("ERR_FRONT_WIN_NOT_MAPPER")
		Exit Sub
	End If

	Create Adornment
		Window nMID
		Type SmartTextAdornment
		Position ADORNMENT_INFO_MAP_POS_TL
		Background Brush (1,16777215,16777215)  Pen (1,1,0)
		Text "$mb{WindowInfo(CurContext(4), WIN_INFO_NAME)}"
		Font DLGWHOGetSmartTextFont()
		Justify Left	'Left | Center | Right

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHAddSmartTextMapTitle")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MAPHAddSmartTextMapCartoScale

Dim	nMID As Integer

OnError GoTo ErrorOccured

'	ADORNMENT_INFO_MAP_POS_TL (0)
'	ADORNMENT_INFO_MAP_POS_TC (1)
'	ADORNMENT_INFO_MAP_POS_TR (2)
'	ADORNMENT_INFO_MAP_POS_CL (3)
'	ADORNMENT_INFO_MAP_POS_CC (4)
'	ADORNMENT_INFO_MAP_POS_CR (5)
'	ADORNMENT_INFO_MAP_POS_BL (6)
'	ADORNMENT_INFO_MAP_POS_BC (7)
'	ADORNMENT_INFO_MAP_POS_BR (8)

	nMID = FrontWindow()
	If nMID = 0 Then
		Note GetResItemStr("ERR_NO_WIN_OPEN")
		Exit Sub
	End If
	If Not WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
		Note GetResItemStr("ERR_FRONT_WIN_NOT_MAPPER")
		Exit Sub
	End If

	Create Adornment
		Window nMID
		Type SmartTextAdornment
		Position ADORNMENT_INFO_MAP_POS_BL
		Background Brush (1,16777215,16777215)  Pen (1,1,0)
		Text "$mb{MapperInfo(CurContext(4), MAPPER_INFO_CARTO_SCALE_EXPR)}"
		Font DLGWHOGetSmartTextFont()
		Justify Left	'Left | Center | Right

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHAddSmartTextMapCartoScale")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MAPHAddSmartTextMapCoordsys

Dim	nMID As Integer

OnError GoTo ErrorOccured

'	ADORNMENT_INFO_MAP_POS_TL (0)
'	ADORNMENT_INFO_MAP_POS_TC (1)
'	ADORNMENT_INFO_MAP_POS_TR (2)
'	ADORNMENT_INFO_MAP_POS_CL (3)
'	ADORNMENT_INFO_MAP_POS_CC (4)
'	ADORNMENT_INFO_MAP_POS_CR (5)
'	ADORNMENT_INFO_MAP_POS_BL (6)
'	ADORNMENT_INFO_MAP_POS_BC (7)
'	ADORNMENT_INFO_MAP_POS_BR (8)

	nMID = FrontWindow()
	If nMID = 0 Then
		Note GetResItemStr("ERR_NO_WIN_OPEN")
		Exit Sub
	End If
	If Not WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
		Note GetResItemStr("ERR_FRONT_WIN_NOT_MAPPER")
		Exit Sub
	End If

	Create Adornment
		Window nMID
		Type SmartTextAdornment
		Position ADORNMENT_INFO_MAP_POS_BR
		Background Brush (1,16777215,16777215)  Pen (1,1,0)
		Text "$mb{MapperInfo(CurContext(4), MAPPER_INFO_COORDSYS_NAME)}"
		Font DLGWHOGetSmartTextFont()
		Justify Right	'Left | Center | Right

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHAddSmartTextMapCoordsys")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter HorsbÃ¸ll MÃ¸ller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MAPHMenuCopyLayerSettingsLC

Dim	nMID, nLayerID As Integer

OnError GoTo ErrorOccured

	If LayerControlInfo(LC_INFO_SEL_COUNT) = 0 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	ElseIf LayerControlInfo(LC_INFO_SEL_COUNT) > 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If

	nMID		= LayerControlSelectionInfo (1, LC_SEL_INFO_MAPWIN_ID)
	nLayerID	= LayerControlSelectionInfo (1, LC_SEL_INFO_LAYER_ID)

	If nLayerID = -1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If
	If LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_COSMETIC Then
		Note GetResItemStr("ERR_COSMETIC_LAYER_NOT_SUPPORTED")
		Exit Sub
	End If
'	If Not LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_NORMAL Then
'		Note GetResItemStr("ERR_SELECT_NORMAL_LAYER_IN_LAYER_CONTROL")
'		Exit Sub
'	End If

	Call tliGetInfo(nMID, nLayerID, mtli)
	mbLayerInfoRead	= TRUE

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHMenuCopyLayerSettingsLC")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter HorsbÃ¸ll MÃ¸ller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MAPHMenuPasteLayerSettingsLC

Dim	nMID, nLayerID As Integer

OnError GoTo ErrorOccured

	If Not mbLayerInfoRead Then
		Exit Sub
	End If

	If LayerControlInfo(LC_INFO_SEL_COUNT) = 0 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	ElseIf LayerControlInfo(LC_INFO_SEL_COUNT) > 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If

	nMID		= LayerControlSelectionInfo (1, LC_SEL_INFO_MAPWIN_ID)
	nLayerID	= LayerControlSelectionInfo (1, LC_SEL_INFO_LAYER_ID)

	If nLayerID = -1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If
	If LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_COSMETIC Then
		Note GetResItemStr("ERR_COSMETIC_LAYER_NOT_SUPPORTED")
		Exit Sub
	End If
'	If Not LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_NORMAL Then
'		Note GetResItemStr("ERR_SELECT_NORMAL_LAYER_IN_LAYER_CONTROL")
'		Exit Sub
'	End If

	If tliApplyInfo(nMID, nLayerID, mtli) Then

	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHMenuPasteLayerSettingsLC")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter HorsbÃ¸ll MÃ¸ller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MAPHMenuRefreshFilteredLayerLC

Dim	nMID, nLayerID As Integer,
	sQueryName As String

OnError GoTo ErrorOccured

	If LayerControlInfo(LC_INFO_SEL_COUNT) = 0 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	ElseIf LayerControlInfo(LC_INFO_SEL_COUNT) > 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If

	nMID		= LayerControlSelectionInfo (1, LC_SEL_INFO_MAPWIN_ID)
	nLayerID	= LayerControlSelectionInfo (1, LC_SEL_INFO_LAYER_ID)

	If nLayerID = -1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If
	If Not LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_NORMAL Then
		Note GetResItemStr("ERR_SELECT_NORMAL_LAYER_IN_LAYER_CONTROL")
		Exit Sub
	End If

	sQueryName = LayerInfo(nMID, nLayerID, LAYER_INFO_FILTER_TABLE_ALIAS)
	If sQueryName <> "" Then
		Select Update For sQueryName Refresh All	'NoSelect not supported
		Select * From sQueryName Where 1 = 0
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHMenuRefreshFilteredLayerLC")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MAPHMenuMoveLayerToTopLC

Dim	nMID, nLayerID As Integer

OnError GoTo ErrorOccured

	If LayerControlInfo(LC_INFO_SEL_COUNT) = 0 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	ElseIf LayerControlInfo(LC_INFO_SEL_COUNT) > 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If

	nMID		= LayerControlSelectionInfo (1, LC_SEL_INFO_MAPWIN_ID)
	nLayerID	= LayerControlSelectionInfo (1, LC_SEL_INFO_LAYER_ID)

	If nLayerID = -1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If
	If LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_COSMETIC Then
		Note GetResItemStr("ERR_COSMETIC_LAYER_NOT_SUPPORTED")
		Exit Sub
	End If

	Set Map Window nMID Order Layers nLayerID Position 1

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHMenuMoveLayerToTopLC")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MAPHMenuMoveLayerToBottomLC

Dim	nMID, nLayerID As Integer

OnError GoTo ErrorOccured

	If LayerControlInfo(LC_INFO_SEL_COUNT) = 0 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	ElseIf LayerControlInfo(LC_INFO_SEL_COUNT) > 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If

	nMID		= LayerControlSelectionInfo (1, LC_SEL_INFO_MAPWIN_ID)
	nLayerID	= LayerControlSelectionInfo (1, LC_SEL_INFO_LAYER_ID)

	If nLayerID = -1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If
	If LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_COSMETIC Then
		Note GetResItemStr("ERR_COSMETIC_LAYER_NOT_SUPPORTED")
		Exit Sub
	End If

	Set Map Window nMID Order Layers nLayerID Position MapperInfo(nMID, MAPPER_INFO_LAYERS)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHMenuMoveLayerToBottomLC")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MAPHMenuSaveThemeStylesToTable

Dim	nMID, nLayerID As Integer,
	sCol As String

OnError GoTo ErrorOccured

	If LayerControlInfo(LC_INFO_SEL_COUNT) = 0 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	ElseIf LayerControlInfo(LC_INFO_SEL_COUNT) > 1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If

	nMID		= LayerControlSelectionInfo (1, LC_SEL_INFO_MAPWIN_ID)
	nLayerID	= LayerControlSelectionInfo (1, LC_SEL_INFO_LAYER_ID)

	If nLayerID = -1 Then
		Note GetResItemStr("ERR_SELECT_ONE_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If
	If Not LayerInfo(nMID, nLayerID, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_THEMATIC Then
		Note GetResItemStr("ERR_SELECT_THEME_LAYER_IN_LAYER_LIST")
		Exit Sub
	End If

	msThemeBaseTab		= ThemeInfo(nMID, nLayerID, THEME_INFO_TABLE_ALIAS)

	Do Case TableInfo(msThemeBaseTab, TAB_INFO_DOMINANT_OBJECT_TYPE)
		Case TAB_MISC_OBJECTS
			Note GetResItemStr("ERR_TAB_WITH_MOSTLY_TEXT_NOT_SUPPORTED")
			Exit Sub
		Case TAB_RASTER_OBJECTS
			Note GetResItemStr("ERR_TAB_WITH_RASTER_NOT_SUPPORTED")
			Exit Sub
		Case TAB_UNKNOWN_OBJECTS
			Note GetResItemStr("ERR_TAB_WITH_UNKNOWN_OBJECT_TYPE")
			Exit Sub
	End Case

	Do Case ThemeInfo (nMID, nLayerID, THEME_INFO_TYPE)
		Case THEME_TYPE_UNIQUE
			'This type is supported
'		Case THEME_TYPE_RANGES
			'This type is not yet supported - under consideration
'		Case THEME_TYPE_GRADUATED
			'This type is not yet supported - under consideration
'		Case THEME_TYPE_BARS
			'This type will not be supported
'		Case THEME_TYPE_PIES
			'This type will not be supported
'		Case THEME_TYPE_DOTDENSITY
			'This type will not be supported
'		Case THEME_TYPE_GRID
			'This type will not be supported
		Case Else
			Note GetResItemStr("ERR_THEME_TYPE_NOT_SUPPORTED")
			Exit Sub
	End Case

	mnNumBins 	= THEMEGetIndividualItems(nMID, nLayerID, marrItems())
	mnCurrentBin	= 1

	Set Progressbars Off

	Progressbar GetResItemStr("STR_APPLYING_THEME_STYLE_TO_OBJS") & "..."
		Calling MAPHSaveThemeStyleToTab_Single
		Range mnNumBins

	Set Progressbars On

'	For nThemeItem = 1 to mnNumBins
'
'		If marrItems(nThemeItem).nExprType = EXPRESSION_TYPE_CHAR Then
'			sCmd = "Select * From " & msThemeBaseTab & " Where " & marrItems(nThemeItem).sExpr & " = "
'		Else
'			sCmd = "Select * From " & msThemeBaseTab & " Where " & " Str$(" & marrItems(nThemeItem).sExpr & ") = "
'		End If
'
'		Do Case marrItems(nThemeItem).nExprType
'			Case EXPRESSION_TYPE_INTEGER, EXPRESSION_TYPE_SMALLINT, 39	', EXPRESSION_TYPE_LARGEINT = 39?
'				sCmd = sCmd & Chr$(34) & Str$(marrItems(nThemeItem).nValue) & Chr$(34)
'			Case EXPRESSION_TYPE_DECIMAL, EXPRESSION_TYPE_FLOAT
'				sCmd = sCmd & Chr$(34) & Str$(marrItems(nThemeItem).fValue) & Chr$(34)
'			Case EXPRESSION_TYPE_CHAR
'				sCmd = sCmd & Chr$(34) & Str$(marrItems(nThemeItem).sValue) & Chr$(34)
'			Case EXPRESSION_TYPE_DATE
'				sCmd = sCmd & Chr$(34) & Str$(marrItems(nThemeItem).dValue) & Chr$(34)
'			Case EXPRESSION_TYPE_TIME
'				sCmd = sCmd & Chr$(34) & Str$(marrItems(nThemeItem).tValue) & Chr$(34)
'			Case EXPRESSION_TYPE_DATETIME
'				sCmd = sCmd & Chr$(34) & Str$(marrItems(nThemeItem).dtValue) & Chr$(34)
'			Case EXPRESSION_TYPE_LOGICAL
'				sCmd = sCmd & Chr$(34) & Str$(marrItems(nThemeItem).bValue) & Chr$(34)
'		End Case
'
'		sCmd = sCmd & " Into __theme__apply_style NoSelect Hide"
'		Print sCmd
'
'		Run Command sCmd
'
'		If TableInfo(__theme__apply_style, TAB_INFO_NROWS) > 0 Then
'			Do Case TableInfo(msThemeBaseTab, TAB_INFO_DOMINANT_OBJECT_TYPE)
'				Case TAB_POINT_OBJECTS
'					Update __theme__apply_style
'						Set OBJ = STLAlterSymbol(OBJ, marrItems(nThemeItem).symStyle)
'						Where STLObjectHasSymbol(OBJ) = TRUE
'				Case TAB_LINE_OBJECTS
'					Update __theme__apply_style
'						Set OBJ = STLAlterPen(OBJ, marrItems(nThemeItem).penLine)
'						Where STLObjectHasPen(OBJ) = TRUE
'				Case TAB_AREA_OBJECTS
'					Update __theme__apply_style
'						Set OBJ = STLAlterPen(STLAlterBrush(OBJ, marrItems(nThemeItem).brsFill), marrItems(nThemeItem).penBorder)
'						Where STLObjectHasBrush(OBJ) = TRUE
'			End Case
'		End If
'		Call TABClose("__theme__apply_style")
'	Next

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHMenuSaveThemeStylesToTable")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MAPHSaveThemeStyleToTab_Single

Dim	sCmd As String

OnError GoTo ErrorOccured

	If marrItems(mnCurrentBin).nExprType = EXPRESSION_TYPE_CHAR Then
		sCmd = "Select * From " & msThemeBaseTab & " Where " & marrItems(mnCurrentBin).sExpr & " = "
	Else
		sCmd = "Select * From " & msThemeBaseTab & " Where " & " Str$(" & marrItems(mnCurrentBin).sExpr & ") = "
	End If

	Do Case marrItems(mnCurrentBin).nExprType
		Case EXPRESSION_TYPE_INTEGER, EXPRESSION_TYPE_SMALLINT, 39	', EXPRESSION_TYPE_LARGEINT = 39?
			sCmd = sCmd & Chr$(34) & Str$(marrItems(mnCurrentBin).nValue) & Chr$(34)
		Case EXPRESSION_TYPE_DECIMAL, EXPRESSION_TYPE_FLOAT
			sCmd = sCmd & Chr$(34) & Str$(marrItems(mnCurrentBin).fValue) & Chr$(34)
		Case EXPRESSION_TYPE_CHAR
			sCmd = sCmd & Chr$(34) & Str$(marrItems(mnCurrentBin).sValue) & Chr$(34)
		Case EXPRESSION_TYPE_DATE
			sCmd = sCmd & Chr$(34) & Str$(marrItems(mnCurrentBin).dValue) & Chr$(34)
		Case EXPRESSION_TYPE_TIME
			sCmd = sCmd & Chr$(34) & Str$(marrItems(mnCurrentBin).tValue) & Chr$(34)
		Case EXPRESSION_TYPE_DATETIME
			sCmd = sCmd & Chr$(34) & Str$(marrItems(mnCurrentBin).dtValue) & Chr$(34)
		Case EXPRESSION_TYPE_LOGICAL
			sCmd = sCmd & Chr$(34) & Str$(marrItems(mnCurrentBin).bValue) & Chr$(34)
	End Case

	sCmd = sCmd & " Into __theme__apply_style NoSelect Hide"
	Call DEBUGPrint(sCmd)
	Run Command sCmd

	If TableInfo(__theme__apply_style, TAB_INFO_NROWS) > 0 Then
		Do Case TableInfo(msThemeBaseTab, TAB_INFO_DOMINANT_OBJECT_TYPE)
			Case TAB_POINT_OBJECTS
				Update __theme__apply_style
					Set OBJ = STLAlterSymbol(OBJ, marrItems(mnCurrentBin).symStyle)
					Where STLObjectHasSymbol(OBJ) = TRUE
			Case TAB_LINE_OBJECTS
				Update __theme__apply_style
					Set OBJ = STLAlterPen(OBJ, marrItems(mnCurrentBin).penLine)
					Where STLObjectHasPen(OBJ) = TRUE
			Case TAB_AREA_OBJECTS
				Update __theme__apply_style
					Set OBJ = STLAlterPen(STLAlterBrush(OBJ, marrItems(mnCurrentBin).brsFill), marrItems(mnCurrentBin).penBorder)
					Where STLObjectHasBrush(OBJ) = TRUE
		End Case
	End If
	Call TABClose("__theme__apply_style")

'-------------------------
NextBin:
	mnCurrentBin = mnCurrentBin + 1
	If mnCurrentBin > mnNumBins Then
		ProgressBar = -1
	Else
		ProgressBar = mnCurrentBin
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MAPHSaveThemeStyleToTab_Single")
	Call ERRPrint()
	GoTo NextBin

End Sub


